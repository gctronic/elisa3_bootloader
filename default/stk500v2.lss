
stk500v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  0003fba8  00001c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba8  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800214  00800214  00001c50  2**0
                  ALLOC
  3 .stab         00000858  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000048  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a01  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002237  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000366  00000000  00000000  00005273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001697  00000000  00000000  000055d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00006c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c84  00000000  00000000  00006d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001480  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000072  00000000  00000000  00008e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  00008ef6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 f6 f2 	jmp	0x3e5ec	; 0x3e5ec <__ctors_end>
   3e004:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e008:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e00c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e010:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e014:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e018:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e01c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e020:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e024:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e028:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e02c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e030:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e034:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e038:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e03c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e040:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e044:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e048:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e04c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e050:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e054:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e058:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e05c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e060:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e064:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e068:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e06c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e070:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e074:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e078:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e07c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e080:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e084:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e088:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e08c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e090:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e094:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e098:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e09c:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0a0:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0a4:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0a8:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0ac:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0b0:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0b4:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0b8:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0bc:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0c0:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0c4:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0c8:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0cc:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0d0:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0d4:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0d8:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0dc:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>
   3e0e0:	0d 94 1d f3 	jmp	0x3e63a	; 0x3e63a <__bad_interrupt>

0003e0e4 <gTextMsg_CPU_Name>:
   3e0e4:	41 54 6d 65 67 61 32 35 36 30 00                    ATmega2560.

0003e0ef <gTextMsg_Explorer>:
   3e0ef:	41 72 64 75 69 6e 6f 20 65 78 70 6c 6f 72 65 72     Arduino explorer
   3e0ff:	20 73 74 6b 35 30 30 56 32 20 62 79 20 4d 4c 53      stk500V2 by MLS
	...

0003e110 <gTextMsg_Prompt>:
   3e110:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

0003e11c <gTextMsg_HUH>:
   3e11c:	48 75 68 3f 00                                      Huh?.

0003e121 <gTextMsg_COMPILED_ON>:
   3e121:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 20 3d 20 00     Compiled on  = .

0003e131 <gTextMsg_CPU_Type>:
   3e131:	43 50 55 20 54 79 70 65 20 20 20 20 20 3d 20 00     CPU Type     = .

0003e141 <gTextMsg_AVR_ARCH>:
   3e141:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 20 3d 20 00     __AVR_ARCH__ = .

0003e151 <gTextMsg_AVR_LIBC>:
   3e151:	41 56 52 20 4c 69 62 43 20 56 65 72 20 3d 20 00     AVR LibC Ver = .

0003e161 <gTextMsg_GCC_VERSION>:
   3e161:	47 43 43 20 56 65 72 73 69 6f 6e 20 20 3d 20 00     GCC Version  = .

0003e171 <gTextMsg_CPU_SIGNATURE>:
   3e171:	43 50 55 20 73 69 67 6e 61 74 75 72 65 3d 20 00     CPU signature= .

0003e181 <gTextMsg_FUSE_BYTE_LOW>:
   3e181:	4c 6f 77 20 66 75 73 65 20 20 20 20 20 3d 20 00     Low fuse     = .

0003e191 <gTextMsg_FUSE_BYTE_HIGH>:
   3e191:	48 69 67 68 20 66 75 73 65 20 20 20 20 3d 20 00     High fuse    = .

0003e1a1 <gTextMsg_FUSE_BYTE_EXT>:
   3e1a1:	45 78 74 20 66 75 73 65 20 20 20 20 20 3d 20 00     Ext fuse     = .

0003e1b1 <gTextMsg_FUSE_BYTE_LOCK>:
   3e1b1:	4c 6f 63 6b 20 66 75 73 65 20 20 20 20 3d 20 00     Lock fuse    = .

0003e1c1 <gTextMsg_GCC_DATE_STR>:
   3e1c1:	4f 63 74 20 31 33 20 32 30 31 35 00                 Oct 13 2015.

0003e1cd <gTextMsg_AVR_LIBC_VER_STR>:
   3e1cd:	31 2e 37 2e 31 00                                   1.7.1.

0003e1d3 <gTextMsg_GCC_VERSION_STR>:
   3e1d3:	34 2e 35 2e 31 00                                   4.5.1.

0003e1d9 <gTextMsg_VECTOR_HEADER>:
   3e1d9:	56 23 20 20 20 41 44 44 52 20 20 20 6f 70 20 63     V#   ADDR   op c
   3e1e9:	6f 64 65 20 20 20 20 20 69 6e 73 74 72 75 63 74     ode     instruct
   3e1f9:	69 6f 6e 20 61 64 64 72 20 20 20 49 6e 74 65 72     ion addr   Inter
   3e209:	72 75 70 74 00                                      rupt.

0003e20e <gTextMsg_noVector>:
   3e20e:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

0003e218 <gTextMsg_rjmp>:
   3e218:	72 6a 6d 70 20 20 00                                rjmp  .

0003e21f <gTextMsg_jmp>:
   3e21f:	6a 6d 70 20 00                                      jmp .

0003e224 <gTextMsg_WHAT_PORT>:
   3e224:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

0003e22f <gTextMsg_PortNotSupported>:
   3e22f:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
   3e23f:	65 64 00                                            ed.

0003e242 <gTextMsg_MustBeLetter>:
   3e242:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0003e253 <gTextMsg_SPACE>:
   3e253:	20 00                                                .

0003e255 <gTextMsg_WriteToEEprom>:
   3e255:	57 72 69 74 74 69 6e 67 20 45 45 00                 Writting EE.

0003e261 <gTextMsg_ReadingEEprom>:
   3e261:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

0003e26c <gTextMsg_EEPROMerrorCnt>:
   3e26c:	65 65 70 72 6f 6d 20 65 72 72 6f 72 20 63 6f 75     eeprom error cou
   3e27c:	6e 74 3d 00                                         nt=.

0003e280 <gTextMsg_PORT>:
   3e280:	50 4f 52 54 00                                      PORT.

0003e285 <gTextMsg_HELP_MSG_0>:
   3e285:	30 3d 5a 65 72 6f 20 61 64 64 72 65 73 73 20 63     0=Zero address c
   3e295:	74 72 73 00                                         trs.

0003e299 <gTextMsg_HELP_MSG_QM>:
   3e299:	3f 3d 43 50 55 20 73 74 61 74 73 00                 ?=CPU stats.

0003e2a5 <gTextMsg_HELP_MSG_AT>:
   3e2a5:	40 3d 45 45 50 52 4f 4d 20 74 65 73 74 00           @=EEPROM test.

0003e2b3 <gTextMsg_HELP_MSG_B>:
   3e2b3:	42 3d 42 6c 69 6e 6b 20 4c 45 44 00                 B=Blink LED.

0003e2bf <gTextMsg_HELP_MSG_E>:
   3e2bf:	45 3d 44 75 6d 70 20 45 45 50 52 4f 4d 00           E=Dump EEPROM.

0003e2cd <gTextMsg_HELP_MSG_F>:
   3e2cd:	46 3d 44 75 6d 70 20 46 4c 41 53 48 00              F=Dump FLASH.

0003e2da <gTextMsg_HELP_MSG_H>:
   3e2da:	48 3d 48 65 6c 70 00                                H=Help.

0003e2e1 <gTextMsg_HELP_MSG_L>:
   3e2e1:	4c 3d 4c 69 73 74 20 49 2f 4f 20 50 6f 72 74 73     L=List I/O Ports
	...

0003e2f2 <gTextMsg_HELP_MSG_Q>:
   3e2f2:	51 3d 51 75 69 74 20 26 20 6a 75 6d 70 20 74 6f     Q=Quit & jump to
   3e302:	20 75 73 65 72 20 70 67 6d 00                        user pgm.

0003e30c <gTextMsg_HELP_MSG_R>:
   3e30c:	52 3d 44 75 6d 70 20 52 41 4d 00                    R=Dump RAM.

0003e317 <gTextMsg_HELP_MSG_V>:
   3e317:	56 3d 73 68 6f 77 20 69 6e 74 65 72 72 75 70 74     V=show interrupt
   3e327:	20 56 65 63 74 6f 72 73 00                           Vectors.

0003e330 <gTextMsg_HELP_MSG_Y>:
   3e330:	59 3d 50 6f 72 74 20 62 6c 69 6e 6b 00              Y=Port blink.

0003e33d <gTextMsg_END>:
   3e33d:	2a 00                                               *.

0003e33f <gAvrInt_RESET>:
   3e33f:	52 45 53 45 54 00                                   RESET.

0003e345 <gAvrInt_INT0>:
   3e345:	49 4e 54 30 00                                      INT0.

0003e34a <gAvrInt_INT1>:
   3e34a:	49 4e 54 31 00                                      INT1.

0003e34f <gAvrInt_INT2>:
   3e34f:	49 4e 54 32 00                                      INT2.

0003e354 <gAvrInt_INT3>:
   3e354:	49 4e 54 33 00                                      INT3.

0003e359 <gAvrInt_INT4>:
   3e359:	49 4e 54 34 00                                      INT4.

0003e35e <gAvrInt_INT5>:
   3e35e:	49 4e 54 35 00                                      INT5.

0003e363 <gAvrInt_INT6>:
   3e363:	49 4e 54 36 00                                      INT6.

0003e368 <gAvrInt_INT7>:
   3e368:	49 4e 54 37 00                                      INT7.

0003e36d <gAvrInt_PCINT0>:
   3e36d:	50 43 49 4e 54 30 00                                PCINT0.

0003e374 <gAvrInt_PCINT1>:
   3e374:	50 43 49 4e 54 31 00                                PCINT1.

0003e37b <gAvrInt_PCINT2>:
   3e37b:	50 43 49 4e 54 32 00                                PCINT2.

0003e382 <gAvrInt_WDT>:
   3e382:	57 44 54 00                                         WDT.

0003e386 <gAvrInt_TIMER0_COMPA>:
   3e386:	54 49 4d 45 52 30 20 43 4f 4d 50 41 00              TIMER0 COMPA.

0003e393 <gAvrInt_TIMER0_COMPB>:
   3e393:	54 49 4d 45 52 30 20 43 4f 4d 50 42 00              TIMER0 COMPB.

0003e3a0 <gAvrInt_TIMER0_OVF>:
   3e3a0:	54 49 4d 45 52 30 20 4f 56 46 00                    TIMER0 OVF.

0003e3ab <gAvrInt_TIMER1_CAPT>:
   3e3ab:	54 49 4d 45 52 31 20 43 41 50 54 00                 TIMER1 CAPT.

0003e3b7 <gAvrInt_TIMER1_COMPA>:
   3e3b7:	54 49 4d 45 52 31 20 43 4f 4d 50 41 00              TIMER1 COMPA.

0003e3c4 <gAvrInt_TIMER1_COMPB>:
   3e3c4:	54 49 4d 45 52 31 20 43 4f 4d 50 42 00              TIMER1 COMPB.

0003e3d1 <gAvrInt_TIMER1_COMPC>:
   3e3d1:	54 49 4d 45 52 31 20 43 4f 4d 50 43 00              TIMER1 COMPC.

0003e3de <gAvrInt_TIMER1_OVF>:
   3e3de:	54 49 4d 45 52 31 20 4f 56 46 00                    TIMER1 OVF.

0003e3e9 <gAvrInt_TIMER2_COMPA>:
   3e3e9:	54 49 4d 45 52 32 20 43 4f 4d 50 41 00              TIMER2 COMPA.

0003e3f6 <gAvrInt_TIMER2_COMPB>:
   3e3f6:	54 49 4d 45 52 32 20 43 4f 4d 50 42 00              TIMER2 COMPB.

0003e403 <gAvrInt_TIMER2_OVF>:
   3e403:	54 49 4d 45 52 32 20 4f 56 46 00                    TIMER2 OVF.

0003e40e <gAvrInt_TIMER3_CAPT>:
   3e40e:	54 49 4d 45 52 33 20 43 41 50 54 00                 TIMER3 CAPT.

0003e41a <gAvrInt_TIMER3_COMPA>:
   3e41a:	54 49 4d 45 52 33 20 43 4f 4d 50 41 00              TIMER3 COMPA.

0003e427 <gAvrInt_TIMER3_COMPB>:
   3e427:	54 49 4d 45 52 33 20 43 4f 4d 50 42 00              TIMER3 COMPB.

0003e434 <gAvrInt_TIMER3_COMPC>:
   3e434:	54 49 4d 45 52 33 20 43 4f 4d 50 43 00              TIMER3 COMPC.

0003e441 <gAvrInt_TIMER3_OVF>:
   3e441:	54 49 4d 45 52 33 20 4f 56 46 00                    TIMER3 OVF.

0003e44c <gAvrInt_TIMER4_CAPT>:
   3e44c:	54 49 4d 45 52 34 20 43 41 50 54 00                 TIMER4 CAPT.

0003e458 <gAvrInt_TIMER4_COMPA>:
   3e458:	54 49 4d 45 52 34 20 43 4f 4d 50 41 00              TIMER4 COMPA.

0003e465 <gAvrInt_TIMER4_COMPB>:
   3e465:	54 49 4d 45 52 34 20 43 4f 4d 50 42 00              TIMER4 COMPB.

0003e472 <gAvrInt_TIMER4_COMPC>:
   3e472:	54 49 4d 45 52 34 20 43 4f 4d 50 43 00              TIMER4 COMPC.

0003e47f <gAvrInt_TIMER4_OVF>:
   3e47f:	54 49 4d 45 52 34 20 4f 56 46 00                    TIMER4 OVF.

0003e48a <gAvrInt_TIMER5_CAPT>:
   3e48a:	54 49 4d 45 52 35 20 43 41 50 54 00                 TIMER5 CAPT.

0003e496 <gAvrInt_TIMER5_COMPA>:
   3e496:	54 49 4d 45 52 35 20 43 4f 4d 50 41 00              TIMER5 COMPA.

0003e4a3 <gAvrInt_TIMER5_COMPB>:
   3e4a3:	54 49 4d 45 52 35 20 43 4f 4d 50 42 00              TIMER5 COMPB.

0003e4b0 <gAvrInt_TIMER5_COMPC>:
   3e4b0:	54 49 4d 45 52 35 20 43 4f 4d 50 43 00              TIMER5 COMPC.

0003e4bd <gAvrInt_TIMER5_OVF>:
   3e4bd:	54 49 4d 45 52 35 20 4f 56 46 00                    TIMER5 OVF.

0003e4c8 <gAvrInt_USART0_RX>:
   3e4c8:	55 53 41 52 54 30 20 52 58 00                       USART0 RX.

0003e4d2 <gAvrInt_USART0_UDRE>:
   3e4d2:	55 53 41 52 54 30 20 55 44 52 45 00                 USART0 UDRE.

0003e4de <gAvrInt_USART0_TX>:
   3e4de:	55 53 41 52 54 30 20 54 58 00                       USART0 TX.

0003e4e8 <gAvrInt_USART1_RX>:
   3e4e8:	55 53 41 52 54 31 20 52 58 00                       USART1 RX.

0003e4f2 <gAvrInt_USART1_UDRE>:
   3e4f2:	55 53 41 52 54 31 20 55 44 52 45 00                 USART1 UDRE.

0003e4fe <gAvrInt_USART1_TX>:
   3e4fe:	55 53 41 52 54 31 20 54 58 00                       USART1 TX.

0003e508 <gAvrInt_USART2_RX>:
   3e508:	55 53 41 52 54 32 20 52 58 00                       USART2 RX.

0003e512 <gAvrInt_USART2_UDRE>:
   3e512:	55 53 41 52 54 32 20 55 44 52 45 00                 USART2 UDRE.

0003e51e <gAvrInt_USART2_TX>:
   3e51e:	55 53 41 52 54 32 20 54 58 00                       USART2 TX.

0003e528 <gAvrInt_USART3_RX>:
   3e528:	55 53 41 52 54 33 20 52 58 00                       USART3 RX.

0003e532 <gAvrInt_USART3_UDRE>:
   3e532:	55 53 41 52 54 33 20 55 44 52 45 00                 USART3 UDRE.

0003e53e <gAvrInt_USART3_TX>:
   3e53e:	55 53 41 52 54 33 20 54 58 00                       USART3 TX.

0003e548 <gAvrInt_SPI_STC>:
   3e548:	53 50 49 20 53 54 43 00                             SPI STC.

0003e550 <gAvrInt_ADC>:
   3e550:	41 44 43 00                                         ADC.

0003e554 <gAvrInt_ANALOG_COMP>:
   3e554:	41 4e 41 4c 4f 47 20 43 4f 4d 50 00                 ANALOG COMP.

0003e560 <gAvrInt_EE_READY>:
   3e560:	45 45 20 52 45 41 44 59 00                          EE READY.

0003e569 <gAvrInt_TWI>:
   3e569:	54 57 49 00                                         TWI.

0003e56d <gAvrInt_SPM_READY>:
   3e56d:	53 50 4d 20 52 45 41 44 59 00                       SPM READY.

0003e577 <gAvrInt_END>:
   3e577:	2a 00                                               *.

0003e579 <gInterruptNameTable>:
   3e579:	3f e3 45 e3 4a e3 4f e3 54 e3 59 e3 5e e3 63 e3     ?.E.J.O.T.Y.^.c.
   3e589:	68 e3 6d e3 74 e3 7b e3 82 e3 e9 e3 f6 e3 03 e4     h.m.t.{.........
   3e599:	ab e3 b7 e3 c4 e3 d1 e3 de e3 86 e3 93 e3 a0 e3     ................
   3e5a9:	48 e5 c8 e4 d2 e4 de e4 54 e5 50 e5 60 e5 0e e4     H.......T.P.`...
   3e5b9:	1a e4 27 e4 34 e4 41 e4 e8 e4 f2 e4 fe e4 69 e5     ..'.4.A.......i.
   3e5c9:	6d e5 4c e4 58 e4 65 e4 72 e4 7f e4 8a e4 96 e4     m.L.X.e.r.......
   3e5d9:	a3 e4 b0 e4 bd e4 08 e5 12 e5 1e e5 28 e5 32 e5     ............(.2.
   3e5e9:	3e e5 00                                            >..

0003e5ec <__ctors_end>:
   3e5ec:	11 24       	eor	r1, r1
   3e5ee:	1f be       	out	0x3f, r1	; 63
   3e5f0:	cf ef       	ldi	r28, 0xFF	; 255
   3e5f2:	d1 e2       	ldi	r29, 0x21	; 33
   3e5f4:	de bf       	out	0x3e, r29	; 62
   3e5f6:	cd bf       	out	0x3d, r28	; 61
   3e5f8:	01 e0       	ldi	r16, 0x01	; 1
   3e5fa:	0c bf       	out	0x3c, r16	; 60

0003e5fc <__do_copy_data>:
   3e5fc:	12 e0       	ldi	r17, 0x02	; 2
   3e5fe:	a0 e0       	ldi	r26, 0x00	; 0
   3e600:	b2 e0       	ldi	r27, 0x02	; 2
   3e602:	e8 ea       	ldi	r30, 0xA8	; 168
   3e604:	fb ef       	ldi	r31, 0xFB	; 251
   3e606:	02 c0       	rjmp	.+4      	; 0x3e60c <.do_copy_data_start>

0003e608 <.do_copy_data_loop>:
   3e608:	05 90       	lpm	r0, Z+
   3e60a:	0d 92       	st	X+, r0

0003e60c <.do_copy_data_start>:
   3e60c:	a4 31       	cpi	r26, 0x14	; 20
   3e60e:	b1 07       	cpc	r27, r17
   3e610:	d9 f7       	brne	.-10     	; 0x3e608 <.do_copy_data_loop>

0003e612 <__do_clear_bss>:
   3e612:	12 e0       	ldi	r17, 0x02	; 2
   3e614:	a4 e1       	ldi	r26, 0x14	; 20
   3e616:	b2 e0       	ldi	r27, 0x02	; 2
   3e618:	01 c0       	rjmp	.+2      	; 0x3e61c <.do_clear_bss_start>

0003e61a <.do_clear_bss_loop>:
   3e61a:	1d 92       	st	X+, r1

0003e61c <.do_clear_bss_start>:
   3e61c:	a0 32       	cpi	r26, 0x20	; 32
   3e61e:	b1 07       	cpc	r27, r17
   3e620:	e1 f7       	brne	.-8      	; 0x3e61a <.do_clear_bss_loop>
   3e622:	0f 94 93 f4 	call	0x3e926	; 0x3e926 <main>
   3e626:	0d 94 d3 fd 	jmp	0x3fba6	; 0x3fba6 <_exit>

0003e62a <__jumpMain>:
//#define	SPH_REG	0x3E
//#define	SPL_REG	0x3D

//*****************************************************************************
void __jumpMain(void)
{
   3e62a:	01 e2       	ldi	r16, 0x21	; 33

//	asm volatile ( "ldi	16, 0x10");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
//	asm volatile ( "out 0x3E,16");
//	asm volatile ( "out %0,16" :: "i" (SPH_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e62c:	0e bf       	out	0x3e, r16	; 62

//	asm volatile ( "ldi	16, 0x00");
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e62e:	0f ef       	ldi	r16, 0xFF	; 255
//	asm volatile ( "out 0x3d,16");
//	asm volatile ( "out %0,16" :: "i" (SPL_REG) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e630:	0d bf       	out	0x3d, r16	; 61



	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e632:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e634:	1f be       	out	0x3f, r1	; 63
//	asm volatile ( "rjmp main");											// jump to main()
	asm volatile ( "jmp main");												// jump to main()
   3e636:	0d 94 93 f4 	jmp	0x3e926	; 0x3e926 <main>

0003e63a <__bad_interrupt>:
   3e63a:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e63e <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e63e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e642:	80 91 c0 00 	lds	r24, 0x00C0
   3e646:	86 ff       	sbrs	r24, 6
   3e648:	fc cf       	rjmp	.-8      	; 0x3e642 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e64a:	80 91 c0 00 	lds	r24, 0x00C0
   3e64e:	80 64       	ori	r24, 0x40	; 64
   3e650:	80 93 c0 00 	sts	0x00C0, r24
}
   3e654:	08 95       	ret

0003e656 <recchar>:
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e656:	80 91 c0 00 	lds	r24, 0x00C0
   3e65a:	87 ff       	sbrs	r24, 7
   3e65c:	fc cf       	rjmp	.-8      	; 0x3e656 <recchar>
	{
		// wait for data
	}
	return UART_DATA_REG;
   3e65e:	80 91 c6 00 	lds	r24, 0x00C6
}
   3e662:	08 95       	ret

0003e664 <delay_ms>:

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e664:	20 e0       	ldi	r18, 0x00	; 0
   3e666:	30 e0       	ldi	r19, 0x00	; 0
   3e668:	08 c0       	rjmp	.+16     	; 0x3e67a <delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e66a:	e7 ee       	ldi	r30, 0xE7	; 231
   3e66c:	f3 e0       	ldi	r31, 0x03	; 3
   3e66e:	31 97       	sbiw	r30, 0x01	; 1
   3e670:	f1 f7       	brne	.-4      	; 0x3e66e <delay_ms+0xa>
   3e672:	00 c0       	rjmp	.+0      	; 0x3e674 <delay_ms+0x10>
   3e674:	00 00       	nop
   3e676:	2f 5f       	subi	r18, 0xFF	; 255
   3e678:	3f 4f       	sbci	r19, 0xFF	; 255
   3e67a:	28 17       	cp	r18, r24
   3e67c:	39 07       	cpc	r19, r25
   3e67e:	a8 f3       	brcs	.-22     	; 0x3e66a <delay_ms+0x6>
	{
		_delay_ms(0.5);
	}
}
   3e680:	08 95       	ret

0003e682 <PrintFromPROGMEM>:
	prog_char	gTextMsg_END[]				PROGMEM	=	"*";


//************************************************************************
void	PrintFromPROGMEM(void *dataPtr, unsigned char offset)
{
   3e682:	ef 92       	push	r14
   3e684:	ff 92       	push	r15
   3e686:	0f 93       	push	r16
   3e688:	1f 93       	push	r17
   3e68a:	df 93       	push	r29
   3e68c:	cf 93       	push	r28
   3e68e:	0f 92       	push	r0
   3e690:	cd b7       	in	r28, 0x3d	; 61
   3e692:	de b7       	in	r29, 0x3e	; 62
	ii			=	offset;
	theChar		=	1;

	while (theChar != 0)
	{
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr + ii);
   3e694:	7c 01       	movw	r14, r24
   3e696:	00 27       	eor	r16, r16
   3e698:	f7 fc       	sbrc	r15, 7
   3e69a:	00 95       	com	r16
   3e69c:	10 2f       	mov	r17, r16
   3e69e:	d8 01       	movw	r26, r16
   3e6a0:	c7 01       	movw	r24, r14
   3e6a2:	86 0f       	add	r24, r22
   3e6a4:	91 1d       	adc	r25, r1
   3e6a6:	a1 1d       	adc	r26, r1
   3e6a8:	b1 1d       	adc	r27, r1
   3e6aa:	ab bf       	out	0x3b, r26	; 59
   3e6ac:	fc 01       	movw	r30, r24
   3e6ae:	87 91       	elpm	r24, Z+
		if (theChar != 0)
   3e6b0:	88 23       	and	r24, r24
   3e6b2:	31 f0       	breq	.+12     	; 0x3e6c0 <PrintFromPROGMEM+0x3e>
		{
			sendchar(theChar);
   3e6b4:	69 83       	std	Y+1, r22	; 0x01
   3e6b6:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		}
		ii++;
   3e6ba:	69 81       	ldd	r22, Y+1	; 0x01
   3e6bc:	6f 5f       	subi	r22, 0xFF	; 255
   3e6be:	ef cf       	rjmp	.-34     	; 0x3e69e <PrintFromPROGMEM+0x1c>
	}
}
   3e6c0:	0f 90       	pop	r0
   3e6c2:	cf 91       	pop	r28
   3e6c4:	df 91       	pop	r29
   3e6c6:	1f 91       	pop	r17
   3e6c8:	0f 91       	pop	r16
   3e6ca:	ff 90       	pop	r15
   3e6cc:	ef 90       	pop	r14
   3e6ce:	08 95       	ret

0003e6d0 <PrintNewLine>:

//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
   3e6d0:	8d e0       	ldi	r24, 0x0D	; 13
   3e6d2:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	sendchar(0x0a);
   3e6d6:	8a e0       	ldi	r24, 0x0A	; 10
   3e6d8:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
}
   3e6dc:	08 95       	ret

0003e6de <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
   3e6de:	1f 93       	push	r17
   3e6e0:	18 2f       	mov	r17, r24
	PrintFromPROGMEM(gTextMsg_PORT, 0);
   3e6e2:	80 e8       	ldi	r24, 0x80	; 128
   3e6e4:	92 ee       	ldi	r25, 0xE2	; 226
   3e6e6:	60 e0       	ldi	r22, 0x00	; 0
   3e6e8:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	sendchar(thePortLetter);
   3e6ec:	81 2f       	mov	r24, r17
   3e6ee:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	PrintNewLine();
   3e6f2:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
}
   3e6f6:	1f 91       	pop	r17
   3e6f8:	08 95       	ret

0003e6fa <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e6fa:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>

	PrintNewLine();
   3e6fe:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
}
   3e702:	08 95       	ret

0003e704 <PrintString>:


//************************************************************************
void	PrintString(char *textString)
{
   3e704:	ef 92       	push	r14
   3e706:	ff 92       	push	r15
   3e708:	cf 93       	push	r28
   3e70a:	df 93       	push	r29
   3e70c:	e8 2e       	mov	r14, r24
   3e70e:	e7 01       	movw	r28, r14
   3e710:	7e 01       	movw	r14, r28
   3e712:	f9 2e       	mov	r15, r25
   3e714:	e7 01       	movw	r28, r14

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   3e716:	89 91       	ld	r24, Y+
		if (theChar != 0)
   3e718:	88 23       	and	r24, r24
   3e71a:	19 f0       	breq	.+6      	; 0x3e722 <PrintString+0x1e>
		{
			sendchar(theChar);
   3e71c:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
   3e720:	fa cf       	rjmp	.-12     	; 0x3e716 <PrintString+0x12>
		}
		ii++;
	}
}
   3e722:	df 91       	pop	r29
   3e724:	cf 91       	pop	r28
   3e726:	ff 90       	pop	r15
   3e728:	ef 90       	pop	r14
   3e72a:	08 95       	ret

0003e72c <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   3e72c:	1f 93       	push	r17
   3e72e:	18 2f       	mov	r17, r24
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   3e730:	98 2f       	mov	r25, r24
   3e732:	92 95       	swap	r25
   3e734:	9f 70       	andi	r25, 0x0F	; 15
   3e736:	89 2f       	mov	r24, r25
   3e738:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39)
   3e73a:	8a 33       	cpi	r24, 0x3A	; 58
   3e73c:	08 f0       	brcs	.+2      	; 0x3e740 <PrintHexByte+0x14>
	{
		theChar	+=	7;
   3e73e:	89 5f       	subi	r24, 0xF9	; 249
	}
	sendchar(theChar );
   3e740:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>

	theChar	=	0x30 + (theByte & 0x0f);
   3e744:	1f 70       	andi	r17, 0x0F	; 15
   3e746:	81 2f       	mov	r24, r17
   3e748:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39)
   3e74a:	8a 33       	cpi	r24, 0x3A	; 58
   3e74c:	08 f0       	brcs	.+2      	; 0x3e750 <PrintHexByte+0x24>
	{
		theChar	+=	7;
   3e74e:	89 5f       	subi	r24, 0xF9	; 249
	}
	sendchar(theChar );
   3e750:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
}
   3e754:	1f 91       	pop	r17
   3e756:	08 95       	ret

0003e758 <DumpHex.clone.0>:
	kDUMP_EEPROM,
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(unsigned char dumpWhat, unsigned long startAddress, unsigned char numRows)
   3e758:	3f 92       	push	r3
   3e75a:	4f 92       	push	r4
   3e75c:	5f 92       	push	r5
   3e75e:	6f 92       	push	r6
   3e760:	7f 92       	push	r7
   3e762:	8f 92       	push	r8
   3e764:	9f 92       	push	r9
   3e766:	af 92       	push	r10
   3e768:	bf 92       	push	r11
   3e76a:	cf 92       	push	r12
   3e76c:	df 92       	push	r13
   3e76e:	ef 92       	push	r14
   3e770:	ff 92       	push	r15
   3e772:	0f 93       	push	r16
   3e774:	1f 93       	push	r17
   3e776:	df 93       	push	r29
   3e778:	cf 93       	push	r28
   3e77a:	cd b7       	in	r28, 0x3d	; 61
   3e77c:	de b7       	in	r29, 0x3e	; 62
   3e77e:	66 97       	sbiw	r28, 0x16	; 22
   3e780:	0f b6       	in	r0, 0x3f	; 63
   3e782:	f8 94       	cli
   3e784:	de bf       	out	0x3e, r29	; 62
   3e786:	0f be       	out	0x3f, r0	; 63
   3e788:	cd bf       	out	0x3d, r28	; 61
   3e78a:	68 2e       	mov	r6, r24
   3e78c:	7a 01       	movw	r14, r20
   3e78e:	8b 01       	movw	r16, r22
   3e790:	db 01       	movw	r26, r22
   3e792:	ca 01       	movw	r24, r20
   3e794:	80 50       	subi	r24, 0x00	; 0
   3e796:	9f 4f       	sbci	r25, 0xFF	; 255
   3e798:	af 4f       	sbci	r26, 0xFF	; 255
   3e79a:	bf 4f       	sbci	r27, 0xFF	; 255
   3e79c:	8b 8b       	std	Y+19, r24	; 0x13
   3e79e:	9c 8b       	std	Y+20, r25	; 0x14
   3e7a0:	ad 8b       	std	Y+21, r26	; 0x15
   3e7a2:	be 8b       	std	Y+22, r27	; 0x16
char			asciiDump[18];
unsigned char	*ramPtr;


	ramPtr				=	0;
	theValue			=	0;
   3e7a4:	77 24       	eor	r7, r7
   3e7a6:	2e 01       	movw	r4, r28
   3e7a8:	08 94       	sec
   3e7aa:	41 1c       	adc	r4, r1
   3e7ac:	51 1c       	adc	r5, r1
			{
				asciiDump[ii % 16]	=	theValue;
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   3e7ae:	8e e2       	ldi	r24, 0x2E	; 46
   3e7b0:	38 2e       	mov	r3, r24
	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
	{
		if (myAddressPointer > 0x10000)
   3e7b2:	91 e0       	ldi	r25, 0x01	; 1
   3e7b4:	e9 16       	cp	r14, r25
   3e7b6:	90 e0       	ldi	r25, 0x00	; 0
   3e7b8:	f9 06       	cpc	r15, r25
   3e7ba:	91 e0       	ldi	r25, 0x01	; 1
   3e7bc:	09 07       	cpc	r16, r25
   3e7be:	90 e0       	ldi	r25, 0x00	; 0
   3e7c0:	19 07       	cpc	r17, r25
   3e7c2:	18 f0       	brcs	.+6      	; 0x3e7ca <DumpHex.clone.0+0x72>
		{
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
   3e7c4:	80 2f       	mov	r24, r16
   3e7c6:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
   3e7ca:	8f 2d       	mov	r24, r15
   3e7cc:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		PrintHexByte(myAddressPointer & 0x00ff);
   3e7d0:	8e 2d       	mov	r24, r14
   3e7d2:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3e7d6:	80 e2       	ldi	r24, 0x20	; 32
   3e7d8:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar('-');
   3e7dc:	8d e2       	ldi	r24, 0x2D	; 45
   3e7de:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar(0x20);
   3e7e2:	80 e2       	ldi	r24, 0x20	; 32
   3e7e4:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>

		asciiDump[0]		=	0;
   3e7e8:	19 82       	std	Y+1, r1	; 0x01
   3e7ea:	57 01       	movw	r10, r14
   3e7ec:	68 01       	movw	r12, r16
   3e7ee:	88 24       	eor	r8, r8
   3e7f0:	99 24       	eor	r9, r9
		for (ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   3e7f2:	a6 2d       	mov	r26, r6
   3e7f4:	a1 30       	cpi	r26, 0x01	; 1
   3e7f6:	49 f0       	breq	.+18     	; 0x3e80a <DumpHex.clone.0+0xb2>
   3e7f8:	a1 30       	cpi	r26, 0x01	; 1
   3e7fa:	18 f0       	brcs	.+6      	; 0x3e802 <DumpHex.clone.0+0xaa>
   3e7fc:	a2 30       	cpi	r26, 0x02	; 2
   3e7fe:	61 f4       	brne	.+24     	; 0x3e818 <DumpHex.clone.0+0xc0>
   3e800:	09 c0       	rjmp	.+18     	; 0x3e814 <DumpHex.clone.0+0xbc>
			{
				case kDUMP_FLASH:
					theValue	=	pgm_read_byte_far(myAddressPointer);
   3e802:	cb be       	out	0x3b, r12	; 59
   3e804:	f5 01       	movw	r30, r10
   3e806:	77 90       	elpm	r7, Z+
   3e808:	07 c0       	rjmp	.+14     	; 0x3e818 <DumpHex.clone.0+0xc0>
					break;

				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((void *)myAddressPointer);
   3e80a:	c5 01       	movw	r24, r10
   3e80c:	0f 94 bd fd 	call	0x3fb7a	; 0x3fb7a <__eerd_byte_m2560>
   3e810:	78 2e       	mov	r7, r24
   3e812:	02 c0       	rjmp	.+4      	; 0x3e818 <DumpHex.clone.0+0xc0>
					break;

				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
   3e814:	f5 01       	movw	r30, r10
   3e816:	70 80       	ld	r7, Z
					break;

			}
			PrintHexByte(theValue);
   3e818:	87 2d       	mov	r24, r7
   3e81a:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			sendchar(0x20);
   3e81e:	80 e2       	ldi	r24, 0x20	; 32
   3e820:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			if ((theValue >= 0x20) && (theValue < 0x7f))
   3e824:	87 2d       	mov	r24, r7
   3e826:	80 52       	subi	r24, 0x20	; 32
   3e828:	94 01       	movw	r18, r8
   3e82a:	2f 70       	andi	r18, 0x0F	; 15
   3e82c:	30 70       	andi	r19, 0x00	; 0
   3e82e:	8f 35       	cpi	r24, 0x5F	; 95
   3e830:	28 f4       	brcc	.+10     	; 0x3e83c <DumpHex.clone.0+0xe4>
			{
				asciiDump[ii % 16]	=	theValue;
   3e832:	24 0d       	add	r18, r4
   3e834:	35 1d       	adc	r19, r5
   3e836:	d9 01       	movw	r26, r18
   3e838:	7c 92       	st	X, r7
   3e83a:	04 c0       	rjmp	.+8      	; 0x3e844 <DumpHex.clone.0+0xec>
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   3e83c:	24 0d       	add	r18, r4
   3e83e:	35 1d       	adc	r19, r5
   3e840:	f9 01       	movw	r30, r18
   3e842:	30 82       	st	Z, r3
			}

			myAddressPointer++;
   3e844:	08 94       	sec
   3e846:	a1 1c       	adc	r10, r1
   3e848:	b1 1c       	adc	r11, r1
   3e84a:	c1 1c       	adc	r12, r1
   3e84c:	d1 1c       	adc	r13, r1
   3e84e:	08 94       	sec
   3e850:	81 1c       	adc	r8, r1
   3e852:	91 1c       	adc	r9, r1
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (ii=0; ii<16; ii++)
   3e854:	f0 e1       	ldi	r31, 0x10	; 16
   3e856:	8f 16       	cp	r8, r31
   3e858:	91 04       	cpc	r9, r1
   3e85a:	59 f6       	brne	.-106    	; 0x3e7f2 <DumpHex.clone.0+0x9a>
   3e85c:	80 e1       	ldi	r24, 0x10	; 16
   3e85e:	90 e0       	ldi	r25, 0x00	; 0
   3e860:	a0 e0       	ldi	r26, 0x00	; 0
   3e862:	b0 e0       	ldi	r27, 0x00	; 0
   3e864:	e8 0e       	add	r14, r24
   3e866:	f9 1e       	adc	r15, r25
   3e868:	0a 1f       	adc	r16, r26
   3e86a:	1b 1f       	adc	r17, r27
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
   3e86c:	19 8a       	std	Y+17, r1	; 0x11
		PrintString(asciiDump);
   3e86e:	c2 01       	movw	r24, r4
   3e870:	0f 94 82 f3 	call	0x3e704	; 0x3e704 <PrintString>
		PrintNewLine();
   3e874:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
   3e878:	8b 89       	ldd	r24, Y+19	; 0x13
   3e87a:	9c 89       	ldd	r25, Y+20	; 0x14
   3e87c:	ad 89       	ldd	r26, Y+21	; 0x15
   3e87e:	be 89       	ldd	r27, Y+22	; 0x16
   3e880:	e8 16       	cp	r14, r24
   3e882:	f9 06       	cpc	r15, r25
   3e884:	0a 07       	cpc	r16, r26
   3e886:	1b 07       	cpc	r17, r27
   3e888:	09 f0       	breq	.+2      	; 0x3e88c <DumpHex.clone.0+0x134>
   3e88a:	93 cf       	rjmp	.-218    	; 0x3e7b2 <DumpHex.clone.0+0x5a>
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
   3e88c:	66 96       	adiw	r28, 0x16	; 22
   3e88e:	0f b6       	in	r0, 0x3f	; 63
   3e890:	f8 94       	cli
   3e892:	de bf       	out	0x3e, r29	; 62
   3e894:	0f be       	out	0x3f, r0	; 63
   3e896:	cd bf       	out	0x3d, r28	; 61
   3e898:	cf 91       	pop	r28
   3e89a:	df 91       	pop	r29
   3e89c:	1f 91       	pop	r17
   3e89e:	0f 91       	pop	r16
   3e8a0:	ff 90       	pop	r15
   3e8a2:	ef 90       	pop	r14
   3e8a4:	df 90       	pop	r13
   3e8a6:	cf 90       	pop	r12
   3e8a8:	bf 90       	pop	r11
   3e8aa:	af 90       	pop	r10
   3e8ac:	9f 90       	pop	r9
   3e8ae:	8f 90       	pop	r8
   3e8b0:	7f 90       	pop	r7
   3e8b2:	6f 90       	pop	r6
   3e8b4:	5f 90       	pop	r5
   3e8b6:	4f 90       	pop	r4
   3e8b8:	3f 90       	pop	r3
   3e8ba:	08 95       	ret

0003e8bc <PrintDecInt>:
	sendchar(theChar );
}

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   3e8bc:	0f 93       	push	r16
   3e8be:	1f 93       	push	r17
   3e8c0:	cf 93       	push	r28
   3e8c2:	df 93       	push	r29
   3e8c4:	ec 01       	movw	r28, r24
   3e8c6:	8b 01       	movw	r16, r22
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e8c8:	85 36       	cpi	r24, 0x65	; 101
   3e8ca:	91 05       	cpc	r25, r1
   3e8cc:	1c f4       	brge	.+6      	; 0x3e8d4 <PrintDecInt+0x18>
   3e8ce:	63 30       	cpi	r22, 0x03	; 3
   3e8d0:	71 05       	cpc	r23, r1
   3e8d2:	4c f0       	brlt	.+18     	; 0x3e8e6 <PrintDecInt+0x2a>
	{
		theChar		=	0x30 + myNumber / 100;
   3e8d4:	ce 01       	movw	r24, r28
   3e8d6:	64 e6       	ldi	r22, 0x64	; 100
   3e8d8:	70 e0       	ldi	r23, 0x00	; 0
   3e8da:	0f 94 74 fd 	call	0x3fae8	; 0x3fae8 <__divmodhi4>
		sendchar(theChar );
   3e8de:	86 2f       	mov	r24, r22
   3e8e0:	80 5d       	subi	r24, 0xD0	; 208
   3e8e2:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e8e6:	cb 30       	cpi	r28, 0x0B	; 11
   3e8e8:	d1 05       	cpc	r29, r1
   3e8ea:	1c f4       	brge	.+6      	; 0x3e8f2 <PrintDecInt+0x36>
   3e8ec:	02 30       	cpi	r16, 0x02	; 2
   3e8ee:	11 05       	cpc	r17, r1
   3e8f0:	6c f0       	brlt	.+26     	; 0x3e90c <PrintDecInt+0x50>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
   3e8f2:	ce 01       	movw	r24, r28
   3e8f4:	64 e6       	ldi	r22, 0x64	; 100
   3e8f6:	70 e0       	ldi	r23, 0x00	; 0
   3e8f8:	0f 94 74 fd 	call	0x3fae8	; 0x3fae8 <__divmodhi4>
   3e8fc:	6a e0       	ldi	r22, 0x0A	; 10
   3e8fe:	70 e0       	ldi	r23, 0x00	; 0
   3e900:	0f 94 74 fd 	call	0x3fae8	; 0x3fae8 <__divmodhi4>
		sendchar(theChar );
   3e904:	86 2f       	mov	r24, r22
   3e906:	80 5d       	subi	r24, 0xD0	; 208
   3e908:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	}
	theChar	=	0x30 + (myNumber % 10);
   3e90c:	ce 01       	movw	r24, r28
   3e90e:	6a e0       	ldi	r22, 0x0A	; 10
   3e910:	70 e0       	ldi	r23, 0x00	; 0
   3e912:	0f 94 74 fd 	call	0x3fae8	; 0x3fae8 <__divmodhi4>
	sendchar(theChar );
   3e916:	80 5d       	subi	r24, 0xD0	; 208
   3e918:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
}
   3e91c:	df 91       	pop	r29
   3e91e:	cf 91       	pop	r28
   3e920:	1f 91       	pop	r17
   3e922:	0f 91       	pop	r16
   3e924:	08 95       	ret

0003e926 <main>:



//*****************************************************************************
int main(void)
{
   3e926:	2f 92       	push	r2
   3e928:	3f 92       	push	r3
   3e92a:	4f 92       	push	r4
   3e92c:	5f 92       	push	r5
   3e92e:	6f 92       	push	r6
   3e930:	7f 92       	push	r7
   3e932:	8f 92       	push	r8
   3e934:	9f 92       	push	r9
   3e936:	af 92       	push	r10
   3e938:	bf 92       	push	r11
   3e93a:	cf 92       	push	r12
   3e93c:	df 92       	push	r13
   3e93e:	ef 92       	push	r14
   3e940:	ff 92       	push	r15
   3e942:	0f 93       	push	r16
   3e944:	1f 93       	push	r17
   3e946:	df 93       	push	r29
   3e948:	cf 93       	push	r28
   3e94a:	cd b7       	in	r28, 0x3d	; 61
   3e94c:	de b7       	in	r29, 0x3e	; 62
   3e94e:	cb 53       	subi	r28, 0x3B	; 59
   3e950:	d1 40       	sbci	r29, 0x01	; 1
   3e952:	0f b6       	in	r0, 0x3f	; 63
   3e954:	f8 94       	cli
   3e956:	de bf       	out	0x3e, r29	; 62
   3e958:	0f be       	out	0x3f, r0	; 63
   3e95a:	cd bf       	out	0x3d, r28	; 61
	initPortsIO();
   3e95c:	0f 94 4f fd 	call	0x3fa9e	; 0x3fa9e <initPortsIO>
	unsigned int	boot_state;
#ifdef ENABLE_MONITOR
	unsigned int	exPointCntr	=	0;
#endif

	unsigned char currentOsccal = eeprom_read_byte((uint8_t*)4093);
   3e960:	8d ef       	ldi	r24, 0xFD	; 253
   3e962:	9f e0       	ldi	r25, 0x0F	; 15
   3e964:	0f 94 bd fd 	call	0x3fb7a	; 0x3fb7a <__eerd_byte_m2560>
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
   3e968:	98 2f       	mov	r25, r24
   3e96a:	91 50       	subi	r25, 0x01	; 1
   3e96c:	9e 3f       	cpi	r25, 0xFE	; 254
   3e96e:	18 f4       	brcc	.+6      	; 0x3e976 <main+0x50>
		OSCCAL = currentOsccal;
   3e970:	80 93 66 00 	sts	0x0066, r24
   3e974:	06 c0       	rjmp	.+12     	; 0x3e982 <main+0x5c>
	} else {
		currentOsccal = OSCCAL;
   3e976:	60 91 66 00 	lds	r22, 0x0066
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
   3e97a:	8d ef       	ldi	r24, 0xFD	; 253
   3e97c:	9f e0       	ldi	r25, 0x0F	; 15
   3e97e:	0f 94 c5 fd 	call	0x3fb8a	; 0x3fb8a <__eewr_byte_m2560>
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3e982:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3e984:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3e986:	80 91 c0 00 	lds	r24, 0x00C0
   3e98a:	82 60       	ori	r24, 0x02	; 2
   3e98c:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e990:	80 e1       	ldi	r24, 0x10	; 16
   3e992:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e996:	88 e1       	ldi	r24, 0x18	; 24
   3e998:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");			// wait until port has changed
   3e99c:	00 00       	nop
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}


	boot_timer	=	0;
   3e99e:	ee 24       	eor	r14, r14
   3e9a0:	ff 24       	eor	r15, r15
   3e9a2:	87 01       	movw	r16, r14
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % 7000) == 0)
   3e9a4:	88 e5       	ldi	r24, 0x58	; 88
   3e9a6:	68 2e       	mov	r6, r24
   3e9a8:	8b e1       	ldi	r24, 0x1B	; 27
   3e9aa:	78 2e       	mov	r7, r24
   3e9ac:	81 2c       	mov	r8, r1
   3e9ae:	91 2c       	mov	r9, r1



//*****************************************************************************
int main(void)
{
   3e9b0:	aa 24       	eor	r10, r10
   3e9b2:	bb 24       	eor	r11, r11
   3e9b4:	25 c0       	rjmp	.+74     	; 0x3ea00 <main+0xda>
   3e9b6:	22 e0       	ldi	r18, 0x02	; 2
   3e9b8:	2a 95       	dec	r18
   3e9ba:	f1 f7       	brne	.-4      	; 0x3e9b8 <main+0x92>
   3e9bc:	00 c0       	rjmp	.+0      	; 0x3e9be <main+0x98>
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
   3e9be:	08 94       	sec
   3e9c0:	e1 1c       	adc	r14, r1
   3e9c2:	f1 1c       	adc	r15, r1
   3e9c4:	01 1d       	adc	r16, r1
   3e9c6:	11 1d       	adc	r17, r1
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e9c8:	b1 e0       	ldi	r27, 0x01	; 1
   3e9ca:	ab 2e       	mov	r10, r27
   3e9cc:	b1 2c       	mov	r11, r1
   3e9ce:	31 e2       	ldi	r19, 0x21	; 33
   3e9d0:	e3 16       	cp	r14, r19
   3e9d2:	3e e4       	ldi	r19, 0x4E	; 78
   3e9d4:	f3 06       	cpc	r15, r19
   3e9d6:	30 e0       	ldi	r19, 0x00	; 0
   3e9d8:	03 07       	cpc	r16, r19
   3e9da:	30 e0       	ldi	r19, 0x00	; 0
   3e9dc:	13 07       	cpc	r17, r19
   3e9de:	10 f4       	brcc	.+4      	; 0x3e9e4 <main+0xbe>
   3e9e0:	aa 24       	eor	r10, r10
   3e9e2:	bb 24       	eor	r11, r11
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % 7000) == 0)
   3e9e4:	c8 01       	movw	r24, r16
   3e9e6:	b7 01       	movw	r22, r14
   3e9e8:	a4 01       	movw	r20, r8
   3e9ea:	93 01       	movw	r18, r6
   3e9ec:	0f 94 87 fd 	call	0x3fb0e	; 0x3fb0e <__udivmodsi4>
   3e9f0:	61 15       	cp	r22, r1
   3e9f2:	71 05       	cpc	r23, r1
   3e9f4:	81 05       	cpc	r24, r1
   3e9f6:	91 05       	cpc	r25, r1
   3e9f8:	19 f4       	brne	.+6      	; 0x3ea00 <main+0xda>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3e9fa:	85 b1       	in	r24, 0x05	; 5
   3e9fc:	80 58       	subi	r24, 0x80	; 128
   3e9fe:	85 b9       	out	0x05, r24	; 5


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3ea00:	80 91 c0 00 	lds	r24, 0x00C0
	delay_ms(100);
#endif

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3ea04:	87 fd       	sbrc	r24, 7
   3ea06:	03 c0       	rjmp	.+6      	; 0x3ea0e <main+0xe8>
   3ea08:	a1 14       	cp	r10, r1
   3ea0a:	b1 04       	cpc	r11, r1
   3ea0c:	a1 f2       	breq	.-88     	; 0x3e9b6 <main+0x90>
	sendchar(0x0a);

	delay_ms(100);
#endif

	while (boot_state==0)
   3ea0e:	c5 01       	movw	r24, r10
   3ea10:	01 96       	adiw	r24, 0x01	; 1
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3ea12:	81 30       	cpi	r24, 0x01	; 1
   3ea14:	91 05       	cpc	r25, r1
   3ea16:	11 f0       	breq	.+4      	; 0x3ea1c <main+0xf6>
   3ea18:	0d 94 06 fd 	jmp	0x3fa0c	; 0x3fa0c <main+0x10e6>
   3ea1c:	c2 5e       	subi	r28, 0xE2	; 226
   3ea1e:	de 4f       	sbci	r29, 0xFE	; 254
   3ea20:	18 82       	st	Y, r1
   3ea22:	19 82       	std	Y+1, r1	; 0x01
   3ea24:	1a 82       	std	Y+2, r1	; 0x02
   3ea26:	1b 82       	std	Y+3, r1	; 0x03
   3ea28:	ce 51       	subi	r28, 0x1E	; 30
   3ea2a:	d1 40       	sbci	r29, 0x01	; 1
   3ea2c:	66 24       	eor	r6, r6
   3ea2e:	77 24       	eor	r7, r7
   3ea30:	43 01       	movw	r8, r6
   3ea32:	cc 24       	eor	r12, r12
   3ea34:	dd 24       	eor	r13, r13
   3ea36:	33 24       	eor	r3, r3
   3ea38:	22 24       	eor	r2, r2
   3ea3a:	ce 5d       	subi	r28, 0xDE	; 222
   3ea3c:	de 4f       	sbci	r29, 0xFE	; 254
   3ea3e:	19 82       	std	Y+1, r1	; 0x01
   3ea40:	18 82       	st	Y, r1
   3ea42:	c2 52       	subi	r28, 0x22	; 34
   3ea44:	d1 40       	sbci	r29, 0x01	; 1
		count++;
		if (count > MAX_TIME_COUNT)
		{
		unsigned int	data;
		#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3ea46:	40 e0       	ldi	r20, 0x00	; 0
   3ea48:	50 e0       	ldi	r21, 0x00	; 0
   3ea4a:	ba 01       	movw	r22, r20
   3ea4c:	6b bf       	out	0x3b, r22	; 59
   3ea4e:	fa 01       	movw	r30, r20
   3ea50:	67 91       	elpm	r22, Z+
   3ea52:	76 91       	elpm	r23, Z+
   3ea54:	ca 5c       	subi	r28, 0xCA	; 202
   3ea56:	de 4f       	sbci	r29, 0xFE	; 254
   3ea58:	79 83       	std	Y+1, r23	; 0x01
   3ea5a:	68 83       	st	Y, r22
   3ea5c:	c6 53       	subi	r28, 0x36	; 54
   3ea5e:	d1 40       	sbci	r29, 0x01	; 1
   3ea60:	0d 94 f9 fc 	jmp	0x3f9f2	; 0x3f9f2 <main+0x10cc>
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3ea64:	80 e0       	ldi	r24, 0x00	; 0
   3ea66:	90 e0       	ldi	r25, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3ea68:	81 30       	cpi	r24, 0x01	; 1
   3ea6a:	91 05       	cpc	r25, r1
   3ea6c:	c9 f4       	brne	.+50     	; 0x3eaa0 <main+0x17a>
   3ea6e:	1f c0       	rjmp	.+62     	; 0x3eaae <main+0x188>
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
   3ea70:	01 96       	adiw	r24, 0x01	; 1
   3ea72:	a1 1d       	adc	r26, r1
   3ea74:	b1 1d       	adc	r27, r1
		if (count > MAX_TIME_COUNT)
   3ea76:	81 30       	cpi	r24, 0x01	; 1
   3ea78:	e9 e0       	ldi	r30, 0x09	; 9
   3ea7a:	9e 07       	cpc	r25, r30
   3ea7c:	ed e3       	ldi	r30, 0x3D	; 61
   3ea7e:	ae 07       	cpc	r26, r30
   3ea80:	e0 e0       	ldi	r30, 0x00	; 0
   3ea82:	be 07       	cpc	r27, r30
   3ea84:	80 f0       	brcs	.+32     	; 0x3eaa6 <main+0x180>
		#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3ea86:	ca 5c       	subi	r28, 0xCA	; 202
   3ea88:	de 4f       	sbci	r29, 0xFE	; 254
   3ea8a:	88 81       	ld	r24, Y
   3ea8c:	99 81       	ldd	r25, Y+1	; 0x01
   3ea8e:	c6 53       	subi	r28, 0x36	; 54
   3ea90:	d1 40       	sbci	r29, 0x01	; 1
   3ea92:	af ef       	ldi	r26, 0xFF	; 255
   3ea94:	8f 3f       	cpi	r24, 0xFF	; 255
   3ea96:	9a 07       	cpc	r25, r26
   3ea98:	19 f0       	breq	.+6      	; 0x3eaa0 <main+0x17a>
			{
				asm volatile(
   3ea9a:	ee 27       	eor	r30, r30
   3ea9c:	ff 27       	eor	r31, r31
   3ea9e:	09 94       	ijmp
		#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3eaa0:	80 e0       	ldi	r24, 0x00	; 0
   3eaa2:	90 e0       	ldi	r25, 0x00	; 0
   3eaa4:	dc 01       	movw	r26, r24
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3eaa6:	e0 91 c0 00 	lds	r30, 0x00C0
   3eaaa:	e7 ff       	sbrs	r30, 7
   3eaac:	e1 cf       	rjmp	.-62     	; 0x3ea70 <main+0x14a>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3eaae:	a0 91 c6 00 	lds	r26, 0x00C6
				//	c	=	recchar();
					c	=	recchar_timeout();
				}

			#ifdef ENABLE_MONITOR
				if (c == '!')
   3eab2:	a1 32       	cpi	r26, 0x21	; 33
   3eab4:	09 f0       	breq	.+2      	; 0x3eab8 <main+0x192>
   3eab6:	4a c5       	rjmp	.+2708   	; 0x3f54c <main+0xc26>
				{
					exPointCntr++;
   3eab8:	08 94       	sec
   3eaba:	c1 1c       	adc	r12, r1
   3eabc:	d1 1c       	adc	r13, r1
					if (exPointCntr == 3)
   3eabe:	b3 e0       	ldi	r27, 0x03	; 3
   3eac0:	cb 16       	cp	r12, r27
   3eac2:	d1 04       	cpc	r13, r1
   3eac4:	09 f0       	breq	.+2      	; 0x3eac8 <main+0x1a2>
   3eac6:	44 c5       	rjmp	.+2696   	; 0x3f550 <main+0xc2a>
   3eac8:	0f c0       	rjmp	.+30     	; 0x3eae8 <main+0x1c2>

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
		{
			sendchar('!');
   3eaca:	81 e2       	ldi	r24, 0x21	; 33
   3eacc:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
   3ead0:	01 50       	subi	r16, 0x01	; 1
   3ead2:	10 40       	sbci	r17, 0x00	; 0
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
	{
		for (jj=0; jj<25; jj++)
   3ead4:	d1 f7       	brne	.-12     	; 0x3eaca <main+0x1a4>
		{
			sendchar('!');
		}
		PrintNewLine();
   3ead6:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
   3eada:	08 94       	sec
   3eadc:	e1 08       	sbc	r14, r1
   3eade:	f1 08       	sbc	r15, r1
{
char			keepGoing;
unsigned char	theChar;
int				ii, jj;

	for (ii=0; ii<5; ii++)
   3eae0:	e1 14       	cp	r14, r1
   3eae2:	f1 04       	cpc	r15, r1
   3eae4:	59 f4       	brne	.+22     	; 0x3eafc <main+0x1d6>
   3eae6:	0d c0       	rjmp	.+26     	; 0x3eb02 <main+0x1dc>
   3eae8:	ce 5d       	subi	r28, 0xDE	; 222
   3eaea:	de 4f       	sbci	r29, 0xFE	; 254
   3eaec:	39 83       	std	Y+1, r19	; 0x01
   3eaee:	28 83       	st	Y, r18
   3eaf0:	c2 52       	subi	r28, 0x22	; 34
   3eaf2:	d1 40       	sbci	r29, 0x01	; 1
   3eaf4:	34 2e       	mov	r3, r20

			#ifdef ENABLE_MONITOR
				if (c == '!')
				{
					exPointCntr++;
					if (exPointCntr == 3)
   3eaf6:	a5 e0       	ldi	r26, 0x05	; 5
   3eaf8:	ea 2e       	mov	r14, r26
   3eafa:	f1 2c       	mov	r15, r1
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
			{
				asm volatile(
   3eafc:	09 e1       	ldi	r16, 0x19	; 25
   3eafe:	10 e0       	ldi	r17, 0x00	; 0
   3eb00:	e4 cf       	rjmp	.-56     	; 0x3eaca <main+0x1a4>
			sendchar('!');
		}
		PrintNewLine();
	}

	gRamIndex			=	0;
   3eb02:	10 92 1c 02 	sts	0x021C, r1
   3eb06:	10 92 1d 02 	sts	0x021D, r1
   3eb0a:	10 92 1e 02 	sts	0x021E, r1
   3eb0e:	10 92 1f 02 	sts	0x021F, r1
	gFlashIndex			=	0;
   3eb12:	10 92 18 02 	sts	0x0218, r1
   3eb16:	10 92 19 02 	sts	0x0219, r1
   3eb1a:	10 92 1a 02 	sts	0x021A, r1
   3eb1e:	10 92 1b 02 	sts	0x021B, r1
	gEepromIndex		=	0;
   3eb22:	10 92 14 02 	sts	0x0214, r1
   3eb26:	10 92 15 02 	sts	0x0215, r1
   3eb2a:	10 92 16 02 	sts	0x0216, r1
   3eb2e:	10 92 17 02 	sts	0x0217, r1

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   3eb32:	8f ee       	ldi	r24, 0xEF	; 239
   3eb34:	90 ee       	ldi	r25, 0xE0	; 224
   3eb36:	60 e0       	ldi	r22, 0x00	; 0
   3eb38:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
   3eb3c:	c8 5c       	subi	r28, 0xC8	; 200
   3eb3e:	de 4f       	sbci	r29, 0xFE	; 254
   3eb40:	68 82       	st	Y, r6
   3eb42:	79 82       	std	Y+1, r7	; 0x01
   3eb44:	8a 82       	std	Y+2, r8	; 0x02
   3eb46:	9b 82       	std	Y+3, r9	; 0x03
   3eb48:	c8 53       	subi	r28, 0x38	; 56
   3eb4a:	d1 40       	sbci	r29, 0x01	; 1

	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
   3eb4c:	80 e1       	ldi	r24, 0x10	; 16
   3eb4e:	91 ee       	ldi	r25, 0xE1	; 225
   3eb50:	60 e0       	ldi	r22, 0x00	; 0
   3eb52:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
		theChar	=	recchar();
   3eb56:	0f 94 2b f3 	call	0x3e656	; 0x3e656 <recchar>
   3eb5a:	08 2f       	mov	r16, r24
		if (theChar >= 0x60)
   3eb5c:	80 36       	cpi	r24, 0x60	; 96
   3eb5e:	08 f0       	brcs	.+2      	; 0x3eb62 <main+0x23c>
		{
			theChar	=	theChar & 0x5F;
   3eb60:	0f 75       	andi	r16, 0x5F	; 95
		{
			
		}
		else
	#endif
		if (theChar >= 0x20)
   3eb62:	00 32       	cpi	r16, 0x20	; 32
   3eb64:	30 f0       	brcs	.+12     	; 0x3eb72 <main+0x24c>
		{
			sendchar(theChar);
   3eb66:	80 2f       	mov	r24, r16
   3eb68:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			sendchar(0x20);
   3eb6c:	80 e2       	ldi	r24, 0x20	; 32
   3eb6e:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		}

		switch(theChar)
   3eb72:	08 34       	cpi	r16, 0x48	; 72
   3eb74:	09 f4       	brne	.+2      	; 0x3eb78 <main+0x252>
   3eb76:	c9 c1       	rjmp	.+914    	; 0x3ef0a <main+0x5e4>
   3eb78:	09 34       	cpi	r16, 0x49	; 73
   3eb7a:	c0 f4       	brcc	.+48     	; 0x3ebac <main+0x286>
   3eb7c:	02 34       	cpi	r16, 0x42	; 66
   3eb7e:	09 f4       	brne	.+2      	; 0x3eb82 <main+0x25c>
   3eb80:	5a c1       	rjmp	.+692    	; 0x3ee36 <main+0x510>
   3eb82:	03 34       	cpi	r16, 0x43	; 67
   3eb84:	60 f4       	brcc	.+24     	; 0x3eb9e <main+0x278>
   3eb86:	00 33       	cpi	r16, 0x30	; 48
   3eb88:	a9 f1       	breq	.+106    	; 0x3ebf4 <main+0x2ce>
   3eb8a:	00 33       	cpi	r16, 0x30	; 48
   3eb8c:	08 f4       	brcc	.+2      	; 0x3eb90 <main+0x26a>
   3eb8e:	d8 c4       	rjmp	.+2480   	; 0x3f540 <main+0xc1a>
   3eb90:	0f 33       	cpi	r16, 0x3F	; 63
   3eb92:	09 f4       	brne	.+2      	; 0x3eb96 <main+0x270>
   3eb94:	45 c0       	rjmp	.+138    	; 0x3ec20 <main+0x2fa>
   3eb96:	00 34       	cpi	r16, 0x40	; 64
   3eb98:	09 f0       	breq	.+2      	; 0x3eb9c <main+0x276>
   3eb9a:	d2 c4       	rjmp	.+2468   	; 0x3f540 <main+0xc1a>
   3eb9c:	ca c0       	rjmp	.+404    	; 0x3ed32 <main+0x40c>
   3eb9e:	05 34       	cpi	r16, 0x45	; 69
   3eba0:	09 f4       	brne	.+2      	; 0x3eba4 <main+0x27e>
   3eba2:	60 c1       	rjmp	.+704    	; 0x3ee64 <main+0x53e>
   3eba4:	06 34       	cpi	r16, 0x46	; 70
   3eba6:	09 f0       	breq	.+2      	; 0x3ebaa <main+0x284>
   3eba8:	cb c4       	rjmp	.+2454   	; 0x3f540 <main+0xc1a>
   3ebaa:	8a c1       	rjmp	.+788    	; 0x3eec0 <main+0x59a>
   3ebac:	02 35       	cpi	r16, 0x52	; 82
   3ebae:	09 f4       	brne	.+2      	; 0x3ebb2 <main+0x28c>
   3ebb0:	12 c2       	rjmp	.+1060   	; 0x3efd6 <main+0x6b0>
   3ebb2:	03 35       	cpi	r16, 0x53	; 83
   3ebb4:	c0 f4       	brcc	.+48     	; 0x3ebe6 <main+0x2c0>
   3ebb6:	0c 34       	cpi	r16, 0x4C	; 76
   3ebb8:	09 f4       	brne	.+2      	; 0x3ebbc <main+0x296>
   3ebba:	e6 c1       	rjmp	.+972    	; 0x3ef88 <main+0x662>
   3ebbc:	01 35       	cpi	r16, 0x51	; 81
   3ebbe:	09 f0       	breq	.+2      	; 0x3ebc2 <main+0x29c>
   3ebc0:	bf c4       	rjmp	.+2430   	; 0x3f540 <main+0xc1a>
   3ebc2:	c8 5c       	subi	r28, 0xC8	; 200
   3ebc4:	de 4f       	sbci	r29, 0xFE	; 254
   3ebc6:	68 80       	ld	r6, Y
   3ebc8:	79 80       	ldd	r7, Y+1	; 0x01
   3ebca:	8a 80       	ldd	r8, Y+2	; 0x02
   3ebcc:	9b 80       	ldd	r9, Y+3	; 0x03
   3ebce:	c8 53       	subi	r28, 0x38	; 56
   3ebd0:	d1 40       	sbci	r29, 0x01	; 1
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
				ListAvailablePorts();
				break;

			case 'Q':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
   3ebd2:	82 ef       	ldi	r24, 0xF2	; 242
   3ebd4:	92 ee       	ldi	r25, 0xE2	; 226
   3ebd6:	62 e0       	ldi	r22, 0x02	; 2
   3ebd8:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
				{
					exPointCntr++;
					if (exPointCntr == 3)
					{
						RunMonitor();
						exPointCntr		=	0;	//	reset back to zero so we dont get in an endless loop
   3ebdc:	cc 24       	eor	r12, r12
   3ebde:	dd 24       	eor	r13, r13
						isLeave			=	1;
   3ebe0:	bb 24       	eor	r11, r11
   3ebe2:	b3 94       	inc	r11
   3ebe4:	04 c5       	rjmp	.+2568   	; 0x3f5ee <main+0xcc8>
		{
			sendchar(theChar);
			sendchar(0x20);
		}

		switch(theChar)
   3ebe6:	06 35       	cpi	r16, 0x56	; 86
   3ebe8:	09 f4       	brne	.+2      	; 0x3ebec <main+0x2c6>
   3ebea:	1a c2       	rjmp	.+1076   	; 0x3f020 <main+0x6fa>
   3ebec:	09 35       	cpi	r16, 0x59	; 89
   3ebee:	09 f0       	breq	.+2      	; 0x3ebf2 <main+0x2cc>
   3ebf0:	a7 c4       	rjmp	.+2382   	; 0x3f540 <main+0xc1a>
   3ebf2:	9b c3       	rjmp	.+1846   	; 0x3f32a <main+0xa04>
		{
			case '0':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 2);
   3ebf4:	85 e8       	ldi	r24, 0x85	; 133
   3ebf6:	92 ee       	ldi	r25, 0xE2	; 226
   3ebf8:	62 e0       	ldi	r22, 0x02	; 2
   3ebfa:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
				gFlashIndex		=	0;
   3ebfe:	10 92 18 02 	sts	0x0218, r1
   3ec02:	10 92 19 02 	sts	0x0219, r1
   3ec06:	10 92 1a 02 	sts	0x021A, r1
   3ec0a:	10 92 1b 02 	sts	0x021B, r1
				gRamIndex		=	0;
   3ec0e:	10 92 1c 02 	sts	0x021C, r1
   3ec12:	10 92 1d 02 	sts	0x021D, r1
   3ec16:	10 92 1e 02 	sts	0x021E, r1
   3ec1a:	10 92 1f 02 	sts	0x021F, r1
   3ec1e:	02 c1       	rjmp	.+516    	; 0x3ee24 <main+0x4fe>
				gEepromIndex	=	0;
				break;

			case '?':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
   3ec20:	89 e9       	ldi	r24, 0x99	; 153
   3ec22:	92 ee       	ldi	r25, 0xE2	; 226
   3ec24:	62 e0       	ldi	r22, 0x02	; 2
   3ec26:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
//************************************************************************
static void	PrintCPUstats(void)
{
unsigned char fuseByte;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   3ec2a:	8f ee       	ldi	r24, 0xEF	; 239
   3ec2c:	90 ee       	ldi	r25, 0xE0	; 224
   3ec2e:	60 e0       	ldi	r22, 0x00	; 0
   3ec30:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_COMPILED_ON, 0);
   3ec34:	81 e2       	ldi	r24, 0x21	; 33
   3ec36:	91 ee       	ldi	r25, 0xE1	; 225
   3ec38:	60 e0       	ldi	r22, 0x00	; 0
   3ec3a:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_DATE_STR, 0);
   3ec3e:	81 ec       	ldi	r24, 0xC1	; 193
   3ec40:	91 ee       	ldi	r25, 0xE1	; 225
   3ec42:	60 e0       	ldi	r22, 0x00	; 0
   3ec44:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_CPU_Type, 0);
   3ec48:	81 e3       	ldi	r24, 0x31	; 49
   3ec4a:	91 ee       	ldi	r25, 0xE1	; 225
   3ec4c:	60 e0       	ldi	r22, 0x00	; 0
   3ec4e:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   3ec52:	84 ee       	ldi	r24, 0xE4	; 228
   3ec54:	90 ee       	ldi	r25, 0xE0	; 224
   3ec56:	60 e0       	ldi	r22, 0x00	; 0
   3ec58:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_AVR_ARCH, 0);
   3ec5c:	81 e4       	ldi	r24, 0x41	; 65
   3ec5e:	91 ee       	ldi	r25, 0xE1	; 225
   3ec60:	60 e0       	ldi	r22, 0x00	; 0
   3ec62:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintDecInt(__AVR_ARCH__, 1);
   3ec66:	86 e0       	ldi	r24, 0x06	; 6
   3ec68:	90 e0       	ldi	r25, 0x00	; 0
   3ec6a:	61 e0       	ldi	r22, 0x01	; 1
   3ec6c:	70 e0       	ldi	r23, 0x00	; 0
   3ec6e:	0f 94 5e f4 	call	0x3e8bc	; 0x3e8bc <PrintDecInt>
	PrintNewLine();
   3ec72:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_GCC_VERSION, 0);
   3ec76:	81 e6       	ldi	r24, 0x61	; 97
   3ec78:	91 ee       	ldi	r25, 0xE1	; 225
   3ec7a:	60 e0       	ldi	r22, 0x00	; 0
   3ec7c:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_VERSION_STR, 0);
   3ec80:	83 ed       	ldi	r24, 0xD3	; 211
   3ec82:	91 ee       	ldi	r25, 0xE1	; 225
   3ec84:	60 e0       	ldi	r22, 0x00	; 0
   3ec86:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

	//*	these can be found in avr/version.h
	PrintFromPROGMEM(gTextMsg_AVR_LIBC, 0);
   3ec8a:	81 e5       	ldi	r24, 0x51	; 81
   3ec8c:	91 ee       	ldi	r25, 0xE1	; 225
   3ec8e:	60 e0       	ldi	r22, 0x00	; 0
   3ec90:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_AVR_LIBC_VER_STR, 0);
   3ec94:	8d ec       	ldi	r24, 0xCD	; 205
   3ec96:	91 ee       	ldi	r25, 0xE1	; 225
   3ec98:	60 e0       	ldi	r22, 0x00	; 0
   3ec9a:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

#if defined(SIGNATURE_0)
	PrintFromPROGMEM(gTextMsg_CPU_SIGNATURE, 0);
   3ec9e:	81 e7       	ldi	r24, 0x71	; 113
   3eca0:	91 ee       	ldi	r25, 0xE1	; 225
   3eca2:	60 e0       	ldi	r22, 0x00	; 0
   3eca4:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
   3eca8:	8e e1       	ldi	r24, 0x1E	; 30
   3ecaa:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintHexByte(SIGNATURE_1);
   3ecae:	88 e9       	ldi	r24, 0x98	; 152
   3ecb0:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintHexByte(SIGNATURE_2);
   3ecb4:	81 e0       	ldi	r24, 0x01	; 1
   3ecb6:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintNewLine();
   3ecba:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOW, 0);
   3ecbe:	81 e8       	ldi	r24, 0x81	; 129
   3ecc0:	91 ee       	ldi	r25, 0xE1	; 225
   3ecc2:	60 e0       	ldi	r22, 0x00	; 0
   3ecc4:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3ecc8:	09 e0       	ldi	r16, 0x09	; 9
   3ecca:	e0 e0       	ldi	r30, 0x00	; 0
   3eccc:	f0 e0       	ldi	r31, 0x00	; 0
   3ecce:	00 93 57 00 	sts	0x0057, r16
   3ecd2:	84 91       	lpm	r24, Z+
	PrintHexByte(fuseByte);
   3ecd4:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintNewLine();
   3ecd8:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_HIGH, 0);
   3ecdc:	81 e9       	ldi	r24, 0x91	; 145
   3ecde:	91 ee       	ldi	r25, 0xE1	; 225
   3ece0:	60 e0       	ldi	r22, 0x00	; 0
   3ece2:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3ece6:	e3 e0       	ldi	r30, 0x03	; 3
   3ece8:	f0 e0       	ldi	r31, 0x00	; 0
   3ecea:	00 93 57 00 	sts	0x0057, r16
   3ecee:	84 91       	lpm	r24, Z+
	PrintHexByte(fuseByte);
   3ecf0:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintNewLine();
   3ecf4:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_EXT, 0);
   3ecf8:	81 ea       	ldi	r24, 0xA1	; 161
   3ecfa:	91 ee       	ldi	r25, 0xE1	; 225
   3ecfc:	60 e0       	ldi	r22, 0x00	; 0
   3ecfe:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3ed02:	e2 e0       	ldi	r30, 0x02	; 2
   3ed04:	f0 e0       	ldi	r31, 0x00	; 0
   3ed06:	00 93 57 00 	sts	0x0057, r16
   3ed0a:	84 91       	lpm	r24, Z+
	PrintHexByte(fuseByte);
   3ed0c:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintNewLine();
   3ed10:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOCK, 0);
   3ed14:	81 eb       	ldi	r24, 0xB1	; 177
   3ed16:	91 ee       	ldi	r25, 0xE1	; 225
   3ed18:	60 e0       	ldi	r22, 0x00	; 0
   3ed1a:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3ed1e:	e1 e0       	ldi	r30, 0x01	; 1
   3ed20:	f0 e0       	ldi	r31, 0x00	; 0
   3ed22:	00 93 57 00 	sts	0x0057, r16
   3ed26:	84 91       	lpm	r24, Z+
	PrintHexByte(fuseByte);
   3ed28:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
	PrintNewLine();
   3ed2c:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
   3ed30:	0d cf       	rjmp	.-486    	; 0x3eb4c <main+0x226>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
				PrintCPUstats();
				break;

			case '@':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
   3ed32:	85 ea       	ldi	r24, 0xA5	; 165
   3ed34:	92 ee       	ldi	r25, 0xE2	; 226
   3ed36:	62 e0       	ldi	r22, 0x02	; 2
   3ed38:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
int		ii;
char	theChar;
char	theEEPROMchar;
int		errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
   3ed3c:	85 e5       	ldi	r24, 0x55	; 85
   3ed3e:	92 ee       	ldi	r25, 0xE2	; 226
   3ed40:	60 e0       	ldi	r22, 0x00	; 0
   3ed42:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintNewLine();
   3ed46:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	ii			=	0;
   3ed4a:	00 e0       	ldi	r16, 0x00	; 0
   3ed4c:	10 e0       	ldi	r17, 0x00	; 0
   3ed4e:	11 c0       	rjmp	.+34     	; 0x3ed72 <main+0x44c>
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
	{
		eeprom_write_byte((uint8_t *)ii, theChar);
   3ed50:	c8 01       	movw	r24, r16
   3ed52:	6e 2d       	mov	r22, r14
   3ed54:	0f 94 c5 fd 	call	0x3fb8a	; 0x3fb8a <__eewr_byte_m2560>
		if (theChar == 0)
   3ed58:	ee 20       	and	r14, r14
   3ed5a:	31 f4       	brne	.+12     	; 0x3ed68 <main+0x442>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   3ed5c:	83 e5       	ldi	r24, 0x53	; 83
   3ed5e:	92 ee       	ldi	r25, 0xE2	; 226
   3ed60:	60 e0       	ldi	r22, 0x00	; 0
   3ed62:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
   3ed66:	03 c0       	rjmp	.+6      	; 0x3ed6e <main+0x448>
		}
		else
		{
			sendchar(theChar);
   3ed68:	8e 2d       	mov	r24, r14
   3ed6a:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		}
		ii++;
   3ed6e:	0f 5f       	subi	r16, 0xFF	; 255
   3ed70:	1f 4f       	sbci	r17, 0xFF	; 255
int		errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3ed72:	c8 01       	movw	r24, r16
   3ed74:	81 51       	subi	r24, 0x11	; 17
   3ed76:	9f 41       	sbci	r25, 0x1F	; 31
   3ed78:	aa 27       	eor	r26, r26
   3ed7a:	97 fd       	sbrc	r25, 7
   3ed7c:	a0 95       	com	r26
   3ed7e:	ba 2f       	mov	r27, r26
   3ed80:	ab bf       	out	0x3b, r26	; 59
   3ed82:	fc 01       	movw	r30, r24
   3ed84:	e7 90       	elpm	r14, Z+
   3ed86:	ee 2d       	mov	r30, r14
   3ed88:	ea 32       	cpi	r30, 0x2A	; 42
   3ed8a:	21 f0       	breq	.+8      	; 0x3ed94 <main+0x46e>
   3ed8c:	f2 e0       	ldi	r31, 0x02	; 2
   3ed8e:	00 30       	cpi	r16, 0x00	; 0
   3ed90:	1f 07       	cpc	r17, r31
   3ed92:	f1 f6       	brne	.-68     	; 0x3ed50 <main+0x42a>
		}
		ii++;
	}

	//*	no go back through and test
	PrintNewLine();
   3ed94:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	PrintNewLine();
   3ed98:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
   3ed9c:	81 e6       	ldi	r24, 0x61	; 97
   3ed9e:	92 ee       	ldi	r25, 0xE2	; 226
   3eda0:	60 e0       	ldi	r22, 0x00	; 0
   3eda2:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintNewLine();
   3eda6:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	errorCount	=	0;
   3edaa:	ee 24       	eor	r14, r14
   3edac:	ff 24       	eor	r15, r15
	ii			=	0;
   3edae:	00 e0       	ldi	r16, 0x00	; 0
   3edb0:	10 e0       	ldi	r17, 0x00	; 0
   3edb2:	15 c0       	rjmp	.+42     	; 0x3edde <main+0x4b8>
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
	{
		theEEPROMchar	=	eeprom_read_byte((uint8_t *)ii);
   3edb4:	c8 01       	movw	r24, r16
   3edb6:	0f 94 bd fd 	call	0x3fb7a	; 0x3fb7a <__eerd_byte_m2560>
   3edba:	c8 2e       	mov	r12, r24
		if (theEEPROMchar == 0)
   3edbc:	88 23       	and	r24, r24
   3edbe:	31 f4       	brne	.+12     	; 0x3edcc <main+0x4a6>
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   3edc0:	83 e5       	ldi	r24, 0x53	; 83
   3edc2:	92 ee       	ldi	r25, 0xE2	; 226
   3edc4:	60 e0       	ldi	r22, 0x00	; 0
   3edc6:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
   3edca:	02 c0       	rjmp	.+4      	; 0x3edd0 <main+0x4aa>
		}
		else
		{
			sendchar(theEEPROMchar);
   3edcc:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		}
		if (theEEPROMchar != theChar)
   3edd0:	cb 14       	cp	r12, r11
   3edd2:	19 f0       	breq	.+6      	; 0x3edda <main+0x4b4>
		{
			errorCount++;
   3edd4:	08 94       	sec
   3edd6:	e1 1c       	adc	r14, r1
   3edd8:	f1 1c       	adc	r15, r1
		}
		ii++;
   3edda:	0f 5f       	subi	r16, 0xFF	; 255
   3eddc:	1f 4f       	sbci	r17, 0xFF	; 255
	PrintNewLine();
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
	while (((theChar = pgm_read_byte_far(gTextMsg_Explorer + ii)) != '*') && (ii < 512))
   3edde:	c8 01       	movw	r24, r16
   3ede0:	81 51       	subi	r24, 0x11	; 17
   3ede2:	9f 41       	sbci	r25, 0x1F	; 31
   3ede4:	aa 27       	eor	r26, r26
   3ede6:	97 fd       	sbrc	r25, 7
   3ede8:	a0 95       	com	r26
   3edea:	ba 2f       	mov	r27, r26
   3edec:	ab bf       	out	0x3b, r26	; 59
   3edee:	fc 01       	movw	r30, r24
   3edf0:	b7 90       	elpm	r11, Z+
   3edf2:	2b 2d       	mov	r18, r11
   3edf4:	2a 32       	cpi	r18, 0x2A	; 42
   3edf6:	21 f0       	breq	.+8      	; 0x3ee00 <main+0x4da>
   3edf8:	32 e0       	ldi	r19, 0x02	; 2
   3edfa:	00 30       	cpi	r16, 0x00	; 0
   3edfc:	13 07       	cpc	r17, r19
   3edfe:	d1 f6       	brne	.-76     	; 0x3edb4 <main+0x48e>
		{
			errorCount++;
		}
		ii++;
	}
	PrintNewLine();
   3ee00:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	PrintNewLine();
   3ee04:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	PrintFromPROGMEM(gTextMsg_EEPROMerrorCnt, 0);
   3ee08:	8c e6       	ldi	r24, 0x6C	; 108
   3ee0a:	92 ee       	ldi	r25, 0xE2	; 226
   3ee0c:	60 e0       	ldi	r22, 0x00	; 0
   3ee0e:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	PrintDecInt(errorCount, 1);
   3ee12:	c7 01       	movw	r24, r14
   3ee14:	61 e0       	ldi	r22, 0x01	; 1
   3ee16:	70 e0       	ldi	r23, 0x00	; 0
   3ee18:	0f 94 5e f4 	call	0x3e8bc	; 0x3e8bc <PrintDecInt>
	PrintNewLine();
   3ee1c:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	PrintNewLine();
   3ee20:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	gEepromIndex	=	0;	//*	set index back to zero for next eeprom dump
   3ee24:	10 92 14 02 	sts	0x0214, r1
   3ee28:	10 92 15 02 	sts	0x0215, r1
   3ee2c:	10 92 16 02 	sts	0x0216, r1
   3ee30:	10 92 17 02 	sts	0x0217, r1
   3ee34:	8b ce       	rjmp	.-746    	; 0x3eb4c <main+0x226>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
				EEPROMtest();
				break;

			case 'B':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
   3ee36:	83 eb       	ldi	r24, 0xB3	; 179
   3ee38:	92 ee       	ldi	r25, 0xE2	; 226
   3ee3a:	62 e0       	ldi	r22, 0x02	; 2
   3ee3c:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
}

//************************************************************************
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3ee40:	27 9a       	sbi	0x04, 7	; 4
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3ee42:	2f 9a       	sbi	0x05, 7	; 5
   3ee44:	0a c0       	rjmp	.+20     	; 0x3ee5a <main+0x534>

	while (!Serial_Available())
	{
		PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// turn LED off
   3ee46:	2f 98       	cbi	0x05, 7	; 5
		delay_ms(100);
   3ee48:	84 e6       	ldi	r24, 0x64	; 100
   3ee4a:	90 e0       	ldi	r25, 0x00	; 0
   3ee4c:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>
		PROGLED_PORT	|=	(1<<PROGLED_PIN);	// turn LED on
   3ee50:	2f 9a       	sbi	0x05, 7	; 5
		delay_ms(100);
   3ee52:	84 e6       	ldi	r24, 0x64	; 100
   3ee54:	90 e0       	ldi	r25, 0x00	; 0
   3ee56:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3ee5a:	80 91 c0 00 	lds	r24, 0x00C0
static void BlinkLED(void)
{
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   3ee5e:	87 ff       	sbrs	r24, 7
   3ee60:	f2 cf       	rjmp	.-28     	; 0x3ee46 <main+0x520>
   3ee62:	68 c3       	rjmp	.+1744   	; 0x3f534 <main+0xc0e>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
				BlinkLED();
				break;

			case 'E':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 2);
   3ee64:	8f eb       	ldi	r24, 0xBF	; 191
   3ee66:	92 ee       	ldi	r25, 0xE2	; 226
   3ee68:	62 e0       	ldi	r22, 0x02	; 2
   3ee6a:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
				DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
   3ee6e:	40 91 14 02 	lds	r20, 0x0214
   3ee72:	50 91 15 02 	lds	r21, 0x0215
   3ee76:	60 91 16 02 	lds	r22, 0x0216
   3ee7a:	70 91 17 02 	lds	r23, 0x0217
   3ee7e:	81 e0       	ldi	r24, 0x01	; 1
   3ee80:	0f 94 ac f3 	call	0x3e758	; 0x3e758 <DumpHex.clone.0>
				gEepromIndex	+=	256;
   3ee84:	80 91 14 02 	lds	r24, 0x0214
   3ee88:	90 91 15 02 	lds	r25, 0x0215
   3ee8c:	a0 91 16 02 	lds	r26, 0x0216
   3ee90:	b0 91 17 02 	lds	r27, 0x0217
   3ee94:	80 50       	subi	r24, 0x00	; 0
   3ee96:	9f 4f       	sbci	r25, 0xFF	; 255
   3ee98:	af 4f       	sbci	r26, 0xFF	; 255
   3ee9a:	bf 4f       	sbci	r27, 0xFF	; 255
   3ee9c:	80 93 14 02 	sts	0x0214, r24
   3eea0:	90 93 15 02 	sts	0x0215, r25
   3eea4:	a0 93 16 02 	sts	0x0216, r26
   3eea8:	b0 93 17 02 	sts	0x0217, r27
				if (gEepromIndex > E2END)
   3eeac:	80 30       	cpi	r24, 0x00	; 0
   3eeae:	40 e1       	ldi	r20, 0x10	; 16
   3eeb0:	94 07       	cpc	r25, r20
   3eeb2:	40 e0       	ldi	r20, 0x00	; 0
   3eeb4:	a4 07       	cpc	r26, r20
   3eeb6:	40 e0       	ldi	r20, 0x00	; 0
   3eeb8:	b4 07       	cpc	r27, r20
   3eeba:	08 f4       	brcc	.+2      	; 0x3eebe <main+0x598>
   3eebc:	47 ce       	rjmp	.-882    	; 0x3eb4c <main+0x226>
   3eebe:	b2 cf       	rjmp	.-156    	; 0x3ee24 <main+0x4fe>
					gEepromIndex	=	0;
				}
				break;
		
			case 'F':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 2);
   3eec0:	8d ec       	ldi	r24, 0xCD	; 205
   3eec2:	92 ee       	ldi	r25, 0xE2	; 226
   3eec4:	62 e0       	ldi	r22, 0x02	; 2
   3eec6:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
				DumpHex(kDUMP_FLASH, gFlashIndex, 16);
   3eeca:	40 91 18 02 	lds	r20, 0x0218
   3eece:	50 91 19 02 	lds	r21, 0x0219
   3eed2:	60 91 1a 02 	lds	r22, 0x021A
   3eed6:	70 91 1b 02 	lds	r23, 0x021B
   3eeda:	80 e0       	ldi	r24, 0x00	; 0
   3eedc:	0f 94 ac f3 	call	0x3e758	; 0x3e758 <DumpHex.clone.0>
				gFlashIndex	+=	256;
   3eee0:	80 91 18 02 	lds	r24, 0x0218
   3eee4:	90 91 19 02 	lds	r25, 0x0219
   3eee8:	a0 91 1a 02 	lds	r26, 0x021A
   3eeec:	b0 91 1b 02 	lds	r27, 0x021B
   3eef0:	80 50       	subi	r24, 0x00	; 0
   3eef2:	9f 4f       	sbci	r25, 0xFF	; 255
   3eef4:	af 4f       	sbci	r26, 0xFF	; 255
   3eef6:	bf 4f       	sbci	r27, 0xFF	; 255
   3eef8:	80 93 18 02 	sts	0x0218, r24
   3eefc:	90 93 19 02 	sts	0x0219, r25
   3ef00:	a0 93 1a 02 	sts	0x021A, r26
   3ef04:	b0 93 1b 02 	sts	0x021B, r27
   3ef08:	21 ce       	rjmp	.-958    	; 0x3eb4c <main+0x226>
				break;

			case 'H':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
   3ef0a:	8a ed       	ldi	r24, 0xDA	; 218
   3ef0c:	92 ee       	ldi	r25, 0xE2	; 226
   3ef0e:	62 e0       	ldi	r22, 0x02	; 2
   3ef10:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 0);
   3ef14:	85 e8       	ldi	r24, 0x85	; 133
   3ef16:	92 ee       	ldi	r25, 0xE2	; 226
   3ef18:	60 e0       	ldi	r22, 0x00	; 0
   3ef1a:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 0);
   3ef1e:	89 e9       	ldi	r24, 0x99	; 153
   3ef20:	92 ee       	ldi	r25, 0xE2	; 226
   3ef22:	60 e0       	ldi	r22, 0x00	; 0
   3ef24:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 0);
   3ef28:	85 ea       	ldi	r24, 0xA5	; 165
   3ef2a:	92 ee       	ldi	r25, 0xE2	; 226
   3ef2c:	60 e0       	ldi	r22, 0x00	; 0
   3ef2e:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 0);
   3ef32:	83 eb       	ldi	r24, 0xB3	; 179
   3ef34:	92 ee       	ldi	r25, 0xE2	; 226
   3ef36:	60 e0       	ldi	r22, 0x00	; 0
   3ef38:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 0);
   3ef3c:	8f eb       	ldi	r24, 0xBF	; 191
   3ef3e:	92 ee       	ldi	r25, 0xE2	; 226
   3ef40:	60 e0       	ldi	r22, 0x00	; 0
   3ef42:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 0);
   3ef46:	8d ec       	ldi	r24, 0xCD	; 205
   3ef48:	92 ee       	ldi	r25, 0xE2	; 226
   3ef4a:	60 e0       	ldi	r22, 0x00	; 0
   3ef4c:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 0);
   3ef50:	8a ed       	ldi	r24, 0xDA	; 218
   3ef52:	92 ee       	ldi	r25, 0xE2	; 226
   3ef54:	60 e0       	ldi	r22, 0x00	; 0
   3ef56:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>

	PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 0);
   3ef5a:	81 ee       	ldi	r24, 0xE1	; 225
   3ef5c:	92 ee       	ldi	r25, 0xE2	; 226
   3ef5e:	60 e0       	ldi	r22, 0x00	; 0
   3ef60:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 0);
   3ef64:	82 ef       	ldi	r24, 0xF2	; 242
   3ef66:	92 ee       	ldi	r25, 0xE2	; 226
   3ef68:	60 e0       	ldi	r22, 0x00	; 0
   3ef6a:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 0);
   3ef6e:	8c e0       	ldi	r24, 0x0C	; 12
   3ef70:	93 ee       	ldi	r25, 0xE3	; 227
   3ef72:	60 e0       	ldi	r22, 0x00	; 0
   3ef74:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 0);
   3ef78:	87 e1       	ldi	r24, 0x17	; 23
   3ef7a:	93 ee       	ldi	r25, 0xE3	; 227
   3ef7c:	60 e0       	ldi	r22, 0x00	; 0
   3ef7e:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 0);
   3ef82:	80 e3       	ldi	r24, 0x30	; 48
   3ef84:	93 ee       	ldi	r25, 0xE3	; 227
   3ef86:	de c2       	rjmp	.+1468   	; 0x3f544 <main+0xc1e>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
				PrintHelp();
				break;

			case 'L':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
   3ef88:	81 ee       	ldi	r24, 0xE1	; 225
   3ef8a:	92 ee       	ldi	r25, 0xE2	; 226
   3ef8c:	62 e0       	ldi	r22, 0x02	; 2
   3ef8e:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
   3ef92:	81 e4       	ldi	r24, 0x41	; 65
   3ef94:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRB
	PrintAvailablePort('B');
   3ef98:	82 e4       	ldi	r24, 0x42	; 66
   3ef9a:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRC
	PrintAvailablePort('C');
   3ef9e:	83 e4       	ldi	r24, 0x43	; 67
   3efa0:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
   3efa4:	84 e4       	ldi	r24, 0x44	; 68
   3efa6:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRE
	PrintAvailablePort('E');
   3efaa:	85 e4       	ldi	r24, 0x45	; 69
   3efac:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRF
	PrintAvailablePort('F');
   3efb0:	86 e4       	ldi	r24, 0x46	; 70
   3efb2:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRG
	PrintAvailablePort('G');
   3efb6:	87 e4       	ldi	r24, 0x47	; 71
   3efb8:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRH
	PrintAvailablePort('H');
   3efbc:	88 e4       	ldi	r24, 0x48	; 72
   3efbe:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#ifdef DDRI
	PrintAvailablePort('I');
#endif

#ifdef DDRJ
	PrintAvailablePort('J');
   3efc2:	8a e4       	ldi	r24, 0x4A	; 74
   3efc4:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRK
	PrintAvailablePort('K');
   3efc8:	8b e4       	ldi	r24, 0x4B	; 75
   3efca:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
#endif

#ifdef DDRL
	PrintAvailablePort('L');
   3efce:	8c e4       	ldi	r24, 0x4C	; 76
   3efd0:	0f 94 6f f3 	call	0x3e6de	; 0x3e6de <PrintAvailablePort>
   3efd4:	bb cd       	rjmp	.-1162   	; 0x3eb4c <main+0x226>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
				keepGoing	=	false;
				break;

			case 'R':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 2);
   3efd6:	8c e0       	ldi	r24, 0x0C	; 12
   3efd8:	93 ee       	ldi	r25, 0xE3	; 227
   3efda:	62 e0       	ldi	r22, 0x02	; 2
   3efdc:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
				DumpHex(kDUMP_RAM, gRamIndex, 16);
   3efe0:	40 91 1c 02 	lds	r20, 0x021C
   3efe4:	50 91 1d 02 	lds	r21, 0x021D
   3efe8:	60 91 1e 02 	lds	r22, 0x021E
   3efec:	70 91 1f 02 	lds	r23, 0x021F
   3eff0:	82 e0       	ldi	r24, 0x02	; 2
   3eff2:	0f 94 ac f3 	call	0x3e758	; 0x3e758 <DumpHex.clone.0>
				gRamIndex	+=	256;
   3eff6:	80 91 1c 02 	lds	r24, 0x021C
   3effa:	90 91 1d 02 	lds	r25, 0x021D
   3effe:	a0 91 1e 02 	lds	r26, 0x021E
   3f002:	b0 91 1f 02 	lds	r27, 0x021F
   3f006:	80 50       	subi	r24, 0x00	; 0
   3f008:	9f 4f       	sbci	r25, 0xFF	; 255
   3f00a:	af 4f       	sbci	r26, 0xFF	; 255
   3f00c:	bf 4f       	sbci	r27, 0xFF	; 255
   3f00e:	80 93 1c 02 	sts	0x021C, r24
   3f012:	90 93 1d 02 	sts	0x021D, r25
   3f016:	a0 93 1e 02 	sts	0x021E, r26
   3f01a:	b0 93 1f 02 	sts	0x021F, r27
   3f01e:	96 cd       	rjmp	.-1236   	; 0x3eb4c <main+0x226>
				break;

			case 'V':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
   3f020:	87 e1       	ldi	r24, 0x17	; 23
   3f022:	93 ee       	ldi	r25, 0xE3	; 227
   3f024:	62 e0       	ldi	r22, 0x02	; 2
   3f026:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   3f02a:	84 ee       	ldi	r24, 0xE4	; 228
   3f02c:	90 ee       	ldi	r25, 0xE0	; 224
   3f02e:	60 e0       	ldi	r22, 0x00	; 0
   3f030:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
   3f034:	89 ed       	ldi	r24, 0xD9	; 217
   3f036:	91 ee       	ldi	r25, 0xE1	; 225
   3f038:	60 e0       	ldi	r22, 0x00	; 0
   3f03a:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
#if defined(_INTERRUPT_NAMES_DEFINED_)
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
   3f03e:	44 24       	eor	r4, r4
   3f040:	55 24       	eor	r5, r5
unsigned long	absoluteAddr;
#if defined(_INTERRUPT_NAMES_DEFINED_)
	long		stringPointer;
#endif

	myMemoryPtr		=	0;
   3f042:	66 24       	eor	r6, r6
   3f044:	77 24       	eor	r7, r7
   3f046:	43 01       	movw	r8, r6
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
	{
		wordMemoryAddress	=	myMemoryPtr / 2;
   3f048:	c4 01       	movw	r24, r8
   3f04a:	b3 01       	movw	r22, r6
   3f04c:	96 95       	lsr	r25
   3f04e:	87 95       	ror	r24
   3f050:	77 95       	ror	r23
   3f052:	67 95       	ror	r22
   3f054:	cc 5d       	subi	r28, 0xDC	; 220
   3f056:	de 4f       	sbci	r29, 0xFE	; 254
   3f058:	68 83       	st	Y, r22
   3f05a:	79 83       	std	Y+1, r23	; 0x01
   3f05c:	8a 83       	std	Y+2, r24	; 0x02
   3f05e:	9b 83       	std	Y+3, r25	; 0x03
   3f060:	c4 52       	subi	r28, 0x24	; 36
   3f062:	d1 40       	sbci	r29, 0x01	; 1
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
   3f064:	08 94       	sec
   3f066:	41 1c       	adc	r4, r1
   3f068:	51 1c       	adc	r5, r1
   3f06a:	c2 01       	movw	r24, r4
   3f06c:	62 e0       	ldi	r22, 0x02	; 2
   3f06e:	70 e0       	ldi	r23, 0x00	; 0
   3f070:	0f 94 5e f4 	call	0x3e8bc	; 0x3e8bc <PrintDecInt>
		sendchar(0x20);
   3f074:	80 e2       	ldi	r24, 0x20	; 32
   3f076:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar('-');
   3f07a:	8d e2       	ldi	r24, 0x2D	; 45
   3f07c:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar(0x20);
   3f080:	80 e2       	ldi	r24, 0x20	; 32
   3f082:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
   3f086:	cb 5d       	subi	r28, 0xDB	; 219
   3f088:	de 4f       	sbci	r29, 0xFE	; 254
   3f08a:	88 81       	ld	r24, Y
   3f08c:	c5 52       	subi	r28, 0x25	; 37
   3f08e:	d1 40       	sbci	r29, 0x01	; 1
   3f090:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		PrintHexByte((wordMemoryAddress) & 0x00ff);
   3f094:	cc 5d       	subi	r28, 0xDC	; 220
   3f096:	de 4f       	sbci	r29, 0xFE	; 254
   3f098:	88 81       	ld	r24, Y
   3f09a:	c4 52       	subi	r28, 0x24	; 36
   3f09c:	d1 40       	sbci	r29, 0x01	; 1
   3f09e:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3f0a2:	80 e2       	ldi	r24, 0x20	; 32
   3f0a4:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar('=');
   3f0a8:	8d e3       	ldi	r24, 0x3D	; 61
   3f0aa:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		sendchar(0x20);
   3f0ae:	80 e2       	ldi	r24, 0x20	; 32
   3f0b0:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>

	
		//*	the AVR is LITTLE ENDIAN, swap the byte order
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
   3f0b4:	8b be       	out	0x3b, r8	; 59
   3f0b6:	f3 01       	movw	r30, r6
   3f0b8:	c7 90       	elpm	r12, Z+
   3f0ba:	8c 2d       	mov	r24, r12
   3f0bc:	90 e0       	ldi	r25, 0x00	; 0
   3f0be:	a0 e0       	ldi	r26, 0x00	; 0
   3f0c0:	b0 e0       	ldi	r27, 0x00	; 0
   3f0c2:	c8 5d       	subi	r28, 0xD8	; 216
   3f0c4:	de 4f       	sbci	r29, 0xFE	; 254
   3f0c6:	88 83       	st	Y, r24
   3f0c8:	99 83       	std	Y+1, r25	; 0x01
   3f0ca:	aa 83       	std	Y+2, r26	; 0x02
   3f0cc:	bb 83       	std	Y+3, r27	; 0x03
   3f0ce:	c8 52       	subi	r28, 0x28	; 40
   3f0d0:	d1 40       	sbci	r29, 0x01	; 1
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
   3f0d2:	d4 01       	movw	r26, r8
   3f0d4:	c3 01       	movw	r24, r6
   3f0d6:	01 96       	adiw	r24, 0x01	; 1
   3f0d8:	a1 1d       	adc	r26, r1
   3f0da:	b1 1d       	adc	r27, r1
   3f0dc:	ab bf       	out	0x3b, r26	; 59
   3f0de:	fc 01       	movw	r30, r24
   3f0e0:	a7 91       	elpm	r26, Z+
   3f0e2:	2a 2f       	mov	r18, r26
   3f0e4:	30 e0       	ldi	r19, 0x00	; 0
   3f0e6:	40 e0       	ldi	r20, 0x00	; 0
   3f0e8:	50 e0       	ldi	r21, 0x00	; 0
   3f0ea:	c4 5d       	subi	r28, 0xD4	; 212
   3f0ec:	de 4f       	sbci	r29, 0xFE	; 254
   3f0ee:	28 83       	st	Y, r18
   3f0f0:	39 83       	std	Y+1, r19	; 0x01
   3f0f2:	4a 83       	std	Y+2, r20	; 0x02
   3f0f4:	5b 83       	std	Y+3, r21	; 0x03
   3f0f6:	cc 52       	subi	r28, 0x2C	; 44
   3f0f8:	d1 40       	sbci	r29, 0x01	; 1
		word1	=	(byte2 << 8) + byte1;
   3f0fa:	ee 24       	eor	r14, r14
   3f0fc:	f2 2e       	mov	r15, r18
   3f0fe:	03 2f       	mov	r16, r19
   3f100:	14 2f       	mov	r17, r20
   3f102:	c8 5d       	subi	r28, 0xD8	; 216
   3f104:	de 4f       	sbci	r29, 0xFE	; 254
   3f106:	48 81       	ld	r20, Y
   3f108:	59 81       	ldd	r21, Y+1	; 0x01
   3f10a:	6a 81       	ldd	r22, Y+2	; 0x02
   3f10c:	7b 81       	ldd	r23, Y+3	; 0x03
   3f10e:	c8 52       	subi	r28, 0x28	; 40
   3f110:	d1 40       	sbci	r29, 0x01	; 1
   3f112:	e4 0e       	add	r14, r20
   3f114:	f5 1e       	adc	r15, r21
   3f116:	06 1f       	adc	r16, r22
   3f118:	17 1f       	adc	r17, r23
   3f11a:	c4 01       	movw	r24, r8
   3f11c:	b3 01       	movw	r22, r6
   3f11e:	6d 5f       	subi	r22, 0xFD	; 253
   3f120:	7f 4f       	sbci	r23, 0xFF	; 255
   3f122:	8f 4f       	sbci	r24, 0xFF	; 255
   3f124:	9f 4f       	sbci	r25, 0xFF	; 255

		byte3	=	pgm_read_byte_far(myMemoryPtr++);
   3f126:	a4 01       	movw	r20, r8
   3f128:	93 01       	movw	r18, r6
   3f12a:	2e 5f       	subi	r18, 0xFE	; 254
   3f12c:	3f 4f       	sbci	r19, 0xFF	; 255
   3f12e:	4f 4f       	sbci	r20, 0xFF	; 255
   3f130:	5f 4f       	sbci	r21, 0xFF	; 255
   3f132:	4b bf       	out	0x3b, r20	; 59
   3f134:	f9 01       	movw	r30, r18
   3f136:	27 90       	elpm	r2, Z+
   3f138:	24 e0       	ldi	r18, 0x04	; 4
   3f13a:	30 e0       	ldi	r19, 0x00	; 0
   3f13c:	40 e0       	ldi	r20, 0x00	; 0
   3f13e:	50 e0       	ldi	r21, 0x00	; 0
   3f140:	62 0e       	add	r6, r18
   3f142:	73 1e       	adc	r7, r19
   3f144:	84 1e       	adc	r8, r20
   3f146:	95 1e       	adc	r9, r21
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   3f148:	8b bf       	out	0x3b, r24	; 59
   3f14a:	fb 01       	movw	r30, r22
   3f14c:	a7 90       	elpm	r10, Z+
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
   3f14e:	8a 2f       	mov	r24, r26
   3f150:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3f154:	80 e2       	ldi	r24, 0x20	; 32
   3f156:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		PrintHexByte(byte1);
   3f15a:	8c 2d       	mov	r24, r12
   3f15c:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3f160:	80 e2       	ldi	r24, 0x20	; 32
   3f162:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		PrintHexByte(byte4);
   3f166:	8a 2d       	mov	r24, r10
   3f168:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3f16c:	80 e2       	ldi	r24, 0x20	; 32
   3f16e:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		PrintHexByte(byte3);
   3f172:	82 2d       	mov	r24, r2
   3f174:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		sendchar(0x20);
   3f178:	80 e2       	ldi	r24, 0x20	; 32
   3f17a:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	
		if (word1 == 0xffff)
   3f17e:	3f ef       	ldi	r19, 0xFF	; 255
   3f180:	e3 16       	cp	r14, r19
   3f182:	3f ef       	ldi	r19, 0xFF	; 255
   3f184:	f3 06       	cpc	r15, r19
   3f186:	30 e0       	ldi	r19, 0x00	; 0
   3f188:	03 07       	cpc	r16, r19
   3f18a:	30 e0       	ldi	r19, 0x00	; 0
   3f18c:	13 07       	cpc	r17, r19
   3f18e:	31 f4       	brne	.+12     	; 0x3f19c <main+0x876>
		{
			PrintFromPROGMEM(gTextMsg_noVector, 0);
   3f190:	8e e0       	ldi	r24, 0x0E	; 14
   3f192:	92 ee       	ldi	r25, 0xE2	; 226
   3f194:	60 e0       	ldi	r22, 0x00	; 0
   3f196:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
   3f19a:	ac c0       	rjmp	.+344    	; 0x3f2f4 <main+0x9ce>
		}
		else if ((word1 & 0xc000) == 0xc000)
   3f19c:	a8 01       	movw	r20, r16
   3f19e:	97 01       	movw	r18, r14
   3f1a0:	20 70       	andi	r18, 0x00	; 0
   3f1a2:	30 7c       	andi	r19, 0xC0	; 192
   3f1a4:	40 70       	andi	r20, 0x00	; 0
   3f1a6:	50 70       	andi	r21, 0x00	; 0
   3f1a8:	20 30       	cpi	r18, 0x00	; 0
   3f1aa:	60 ec       	ldi	r22, 0xC0	; 192
   3f1ac:	36 07       	cpc	r19, r22
   3f1ae:	60 e0       	ldi	r22, 0x00	; 0
   3f1b0:	46 07       	cpc	r20, r22
   3f1b2:	60 e0       	ldi	r22, 0x00	; 0
   3f1b4:	56 07       	cpc	r21, r22
   3f1b6:	01 f5       	brne	.+64     	; 0x3f1f8 <main+0x8d2>
		{
			//*	rjmp instruction
			realitiveAddr	=	word1 & 0x3FFF;
   3f1b8:	7f ef       	ldi	r23, 0xFF	; 255
   3f1ba:	a7 2e       	mov	r10, r23
   3f1bc:	7f e3       	ldi	r23, 0x3F	; 63
   3f1be:	b7 2e       	mov	r11, r23
   3f1c0:	c1 2c       	mov	r12, r1
   3f1c2:	d1 2c       	mov	r13, r1
   3f1c4:	ae 20       	and	r10, r14
   3f1c6:	bf 20       	and	r11, r15
   3f1c8:	c0 22       	and	r12, r16
   3f1ca:	d1 22       	and	r13, r17
			absoluteAddr	=	wordMemoryAddress + realitiveAddr;	//*	add the offset to the current address
   3f1cc:	cc 5d       	subi	r28, 0xDC	; 220
   3f1ce:	de 4f       	sbci	r29, 0xFE	; 254
   3f1d0:	e8 80       	ld	r14, Y
   3f1d2:	f9 80       	ldd	r15, Y+1	; 0x01
   3f1d4:	0a 81       	ldd	r16, Y+2	; 0x02
   3f1d6:	1b 81       	ldd	r17, Y+3	; 0x03
   3f1d8:	c4 52       	subi	r28, 0x24	; 36
   3f1da:	d1 40       	sbci	r29, 0x01	; 1
   3f1dc:	ea 0c       	add	r14, r10
   3f1de:	fb 1c       	adc	r15, r11
   3f1e0:	0c 1d       	adc	r16, r12
   3f1e2:	1d 1d       	adc	r17, r13
			absoluteAddr	=	absoluteAddr << 1;					//*	multiply by 2 for byte address
   3f1e4:	ee 0c       	add	r14, r14
   3f1e6:	ff 1c       	adc	r15, r15
   3f1e8:	00 1f       	adc	r16, r16
   3f1ea:	11 1f       	adc	r17, r17

			PrintFromPROGMEM(gTextMsg_rjmp, 0);
   3f1ec:	88 e1       	ldi	r24, 0x18	; 24
   3f1ee:	92 ee       	ldi	r25, 0xE2	; 226
   3f1f0:	60 e0       	ldi	r22, 0x00	; 0
   3f1f2:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
   3f1f6:	69 c0       	rjmp	.+210    	; 0x3f2ca <main+0x9a4>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
   3f1f8:	d8 01       	movw	r26, r16
   3f1fa:	c7 01       	movw	r24, r14
   3f1fc:	8e 70       	andi	r24, 0x0E	; 14
   3f1fe:	9e 7f       	andi	r25, 0xFE	; 254
   3f200:	a0 70       	andi	r26, 0x00	; 0
   3f202:	b0 70       	andi	r27, 0x00	; 0
   3f204:	8c 30       	cpi	r24, 0x0C	; 12
   3f206:	74 e9       	ldi	r23, 0x94	; 148
   3f208:	97 07       	cpc	r25, r23
   3f20a:	70 e0       	ldi	r23, 0x00	; 0
   3f20c:	a7 07       	cpc	r26, r23
   3f20e:	70 e0       	ldi	r23, 0x00	; 0
   3f210:	b7 07       	cpc	r27, r23
   3f212:	09 f0       	breq	.+2      	; 0x3f216 <main+0x8f0>
   3f214:	6f c0       	rjmp	.+222    	; 0x3f2f4 <main+0x9ce>
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
		word1	=	(byte2 << 8) + byte1;

		byte3	=	pgm_read_byte_far(myMemoryPtr++);
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   3f216:	bb 24       	eor	r11, r11
   3f218:	cc 24       	eor	r12, r12
   3f21a:	dd 24       	eor	r13, r13
		word2	=	(byte4 << 8) + byte3;
   3f21c:	dc 2c       	mov	r13, r12
   3f21e:	cb 2c       	mov	r12, r11
   3f220:	ba 2c       	mov	r11, r10
   3f222:	aa 24       	eor	r10, r10
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   3f224:	a2 0c       	add	r10, r2
   3f226:	b1 1c       	adc	r11, r1
   3f228:	c1 1c       	adc	r12, r1
   3f22a:	d1 1c       	adc	r13, r1
   3f22c:	c8 5d       	subi	r28, 0xD8	; 216
   3f22e:	de 4f       	sbci	r29, 0xFE	; 254
   3f230:	88 81       	ld	r24, Y
   3f232:	99 81       	ldd	r25, Y+1	; 0x01
   3f234:	aa 81       	ldd	r26, Y+2	; 0x02
   3f236:	bb 81       	ldd	r27, Y+3	; 0x03
   3f238:	c8 52       	subi	r28, 0x28	; 40
   3f23a:	d1 40       	sbci	r29, 0x01	; 1
   3f23c:	81 70       	andi	r24, 0x01	; 1
   3f23e:	90 70       	andi	r25, 0x00	; 0
   3f240:	a0 70       	andi	r26, 0x00	; 0
   3f242:	b0 70       	andi	r27, 0x00	; 0
   3f244:	dc 01       	movw	r26, r24
   3f246:	99 27       	eor	r25, r25
   3f248:	88 27       	eor	r24, r24
								((byte1 & 0xf0) << 17) +
   3f24a:	a8 0e       	add	r10, r24
   3f24c:	b9 1e       	adc	r11, r25
   3f24e:	ca 1e       	adc	r12, r26
   3f250:	db 1e       	adc	r13, r27
   3f252:	c8 5d       	subi	r28, 0xD8	; 216
   3f254:	de 4f       	sbci	r29, 0xFE	; 254
   3f256:	88 81       	ld	r24, Y
   3f258:	99 81       	ldd	r25, Y+1	; 0x01
   3f25a:	aa 81       	ldd	r26, Y+2	; 0x02
   3f25c:	bb 81       	ldd	r27, Y+3	; 0x03
   3f25e:	c8 52       	subi	r28, 0x28	; 40
   3f260:	d1 40       	sbci	r29, 0x01	; 1
   3f262:	80 7f       	andi	r24, 0xF0	; 240
   3f264:	90 70       	andi	r25, 0x00	; 0
   3f266:	a0 70       	andi	r26, 0x00	; 0
   3f268:	b0 70       	andi	r27, 0x00	; 0
   3f26a:	31 e1       	ldi	r19, 0x11	; 17
   3f26c:	88 0f       	add	r24, r24
   3f26e:	99 1f       	adc	r25, r25
   3f270:	aa 1f       	adc	r26, r26
   3f272:	bb 1f       	adc	r27, r27
   3f274:	3a 95       	dec	r19
   3f276:	d1 f7       	brne	.-12     	; 0x3f26c <main+0x946>
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
		word1	=	(byte2 << 8) + byte1;

		byte3	=	pgm_read_byte_far(myMemoryPtr++);
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
		word2	=	(byte4 << 8) + byte3;
   3f278:	a8 0e       	add	r10, r24
   3f27a:	b9 1e       	adc	r11, r25
   3f27c:	ca 1e       	adc	r12, r26
   3f27e:	db 1e       	adc	r13, r27
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
   3f280:	c4 5d       	subi	r28, 0xD4	; 212
   3f282:	de 4f       	sbci	r29, 0xFE	; 254
   3f284:	88 81       	ld	r24, Y
   3f286:	99 81       	ldd	r25, Y+1	; 0x01
   3f288:	aa 81       	ldd	r26, Y+2	; 0x02
   3f28a:	bb 81       	ldd	r27, Y+3	; 0x03
   3f28c:	cc 52       	subi	r28, 0x2C	; 44
   3f28e:	d1 40       	sbci	r29, 0x01	; 1
   3f290:	81 70       	andi	r24, 0x01	; 1
   3f292:	90 70       	andi	r25, 0x00	; 0
   3f294:	a0 70       	andi	r26, 0x00	; 0
   3f296:	b0 70       	andi	r27, 0x00	; 0
   3f298:	25 e1       	ldi	r18, 0x15	; 21
   3f29a:	88 0f       	add	r24, r24
   3f29c:	99 1f       	adc	r25, r25
   3f29e:	aa 1f       	adc	r26, r26
   3f2a0:	bb 1f       	adc	r27, r27
   3f2a2:	2a 95       	dec	r18
   3f2a4:	d1 f7       	brne	.-12     	; 0x3f29a <main+0x974>
	
		}
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   3f2a6:	a8 0e       	add	r10, r24
   3f2a8:	b9 1e       	adc	r11, r25
   3f2aa:	ca 1e       	adc	r12, r26
   3f2ac:	db 1e       	adc	r13, r27
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
								word2;
							
			absoluteAddr	=	myFullAddress << 1;
   3f2ae:	86 01       	movw	r16, r12
   3f2b0:	75 01       	movw	r14, r10
   3f2b2:	ee 0c       	add	r14, r14
   3f2b4:	ff 1c       	adc	r15, r15
   3f2b6:	00 1f       	adc	r16, r16
   3f2b8:	11 1f       	adc	r17, r17
							
			PrintFromPROGMEM(gTextMsg_jmp, 0);
   3f2ba:	8f e1       	ldi	r24, 0x1F	; 31
   3f2bc:	92 ee       	ldi	r25, 0xE2	; 226
   3f2be:	60 e0       	ldi	r22, 0x00	; 0
   3f2c0:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
   3f2c4:	8c 2d       	mov	r24, r12
   3f2c6:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
   3f2ca:	8b 2d       	mov	r24, r11
   3f2cc:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			PrintHexByte((myFullAddress) & 0x00ff);
   3f2d0:	8a 2d       	mov	r24, r10
   3f2d2:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			sendchar(0x20);
   3f2d6:	80 e2       	ldi	r24, 0x20	; 32
   3f2d8:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			sendchar('>');
   3f2dc:	8e e3       	ldi	r24, 0x3E	; 62
   3f2de:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   3f2e2:	80 2f       	mov	r24, r16
   3f2e4:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   3f2e8:	8f 2d       	mov	r24, r15
   3f2ea:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
			PrintHexByte((absoluteAddr) & 0x00ff);
   3f2ee:	8e 2d       	mov	r24, r14
   3f2f0:	0f 94 96 f3 	call	0x3e72c	; 0x3e72c <PrintHexByte>
		}

	#if defined(_INTERRUPT_NAMES_DEFINED_)
		sendchar(0x20);
   3f2f4:	80 e2       	ldi	r24, 0x20	; 32
   3f2f6:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
		stringPointer	=	pgm_read_word_far(&(gInterruptNameTable[vectorIndex]));
   3f2fa:	c2 01       	movw	r24, r4
   3f2fc:	88 0f       	add	r24, r24
   3f2fe:	99 1f       	adc	r25, r25
   3f300:	89 58       	subi	r24, 0x89	; 137
   3f302:	9a 41       	sbci	r25, 0x1A	; 26
   3f304:	aa 27       	eor	r26, r26
   3f306:	97 fd       	sbrc	r25, 7
   3f308:	a0 95       	com	r26
   3f30a:	ba 2f       	mov	r27, r26
		PrintFromPROGMEM((char *)stringPointer, 0);
   3f30c:	ab bf       	out	0x3b, r26	; 59
   3f30e:	fc 01       	movw	r30, r24
   3f310:	87 91       	elpm	r24, Z+
   3f312:	96 91       	elpm	r25, Z+
   3f314:	60 e0       	ldi	r22, 0x00	; 0
   3f316:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>
	#endif
		PrintNewLine();
   3f31a:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
   3f31e:	89 e3       	ldi	r24, 0x39	; 57
   3f320:	48 16       	cp	r4, r24
   3f322:	51 04       	cpc	r5, r1
   3f324:	09 f0       	breq	.+2      	; 0x3f328 <main+0xa02>
   3f326:	90 ce       	rjmp	.-736    	; 0x3f048 <main+0x722>
   3f328:	11 cc       	rjmp	.-2014   	; 0x3eb4c <main+0x226>
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
				VectorDisplay();
				break;

			case 'Y':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
   3f32a:	80 e3       	ldi	r24, 0x30	; 48
   3f32c:	93 ee       	ldi	r25, 0xE3	; 227
   3f32e:	62 e0       	ldi	r22, 0x02	; 2
   3f330:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
static void	AVR_PortOutput(void)
{
char	portLetter;
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);
   3f334:	84 e2       	ldi	r24, 0x24	; 36
   3f336:	92 ee       	ldi	r25, 0xE2	; 226
   3f338:	60 e0       	ldi	r22, 0x00	; 0
   3f33a:	0f 94 41 f3 	call	0x3e682	; 0x3e682 <PrintFromPROGMEM>

	portLetter	=	recchar();
   3f33e:	0f 94 2b f3 	call	0x3e656	; 0x3e656 <recchar>
	portLetter	=	portLetter & 0x5f;
   3f342:	08 2f       	mov	r16, r24
   3f344:	0f 75       	andi	r16, 0x5F	; 95
	sendchar(portLetter);
   3f346:	80 2f       	mov	r24, r16
   3f348:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
	PrintNewLine();
   3f34c:	0f 94 68 f3 	call	0x3e6d0	; 0x3e6d0 <PrintNewLine>

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
   3f350:	80 2f       	mov	r24, r16
   3f352:	81 54       	subi	r24, 0x41	; 65
   3f354:	8a 31       	cpi	r24, 0x1A	; 26
   3f356:	08 f0       	brcs	.+2      	; 0x3f35a <main+0xa34>
   3f358:	f0 c0       	rjmp	.+480    	; 0x3f53a <main+0xc14>
	{
		getCharFlag	=	true;
		switch(portLetter)
   3f35a:	06 34       	cpi	r16, 0x46	; 70
   3f35c:	09 f4       	brne	.+2      	; 0x3f360 <main+0xa3a>
   3f35e:	77 c0       	rjmp	.+238    	; 0x3f44e <main+0xb28>
   3f360:	07 34       	cpi	r16, 0x47	; 71
   3f362:	90 f4       	brcc	.+36     	; 0x3f388 <main+0xa62>
   3f364:	03 34       	cpi	r16, 0x43	; 67
   3f366:	09 f4       	brne	.+2      	; 0x3f36a <main+0xa44>
   3f368:	42 c0       	rjmp	.+132    	; 0x3f3ee <main+0xac8>
   3f36a:	04 34       	cpi	r16, 0x44	; 68
   3f36c:	30 f4       	brcc	.+12     	; 0x3f37a <main+0xa54>
   3f36e:	01 34       	cpi	r16, 0x41	; 65
   3f370:	f1 f0       	breq	.+60     	; 0x3f3ae <main+0xa88>
   3f372:	02 34       	cpi	r16, 0x42	; 66
   3f374:	09 f0       	breq	.+2      	; 0x3f378 <main+0xa52>
   3f376:	db c0       	rjmp	.+438    	; 0x3f52e <main+0xc08>
   3f378:	2a c0       	rjmp	.+84     	; 0x3f3ce <main+0xaa8>
   3f37a:	04 34       	cpi	r16, 0x44	; 68
   3f37c:	09 f4       	brne	.+2      	; 0x3f380 <main+0xa5a>
   3f37e:	47 c0       	rjmp	.+142    	; 0x3f40e <main+0xae8>
   3f380:	05 34       	cpi	r16, 0x45	; 69
   3f382:	09 f0       	breq	.+2      	; 0x3f386 <main+0xa60>
   3f384:	d4 c0       	rjmp	.+424    	; 0x3f52e <main+0xc08>
   3f386:	53 c0       	rjmp	.+166    	; 0x3f42e <main+0xb08>
   3f388:	0a 34       	cpi	r16, 0x4A	; 74
   3f38a:	09 f4       	brne	.+2      	; 0x3f38e <main+0xa68>
   3f38c:	94 c0       	rjmp	.+296    	; 0x3f4b6 <main+0xb90>
   3f38e:	0b 34       	cpi	r16, 0x4B	; 75
   3f390:	38 f4       	brcc	.+14     	; 0x3f3a0 <main+0xa7a>
   3f392:	07 34       	cpi	r16, 0x47	; 71
   3f394:	09 f4       	brne	.+2      	; 0x3f398 <main+0xa72>
   3f396:	6b c0       	rjmp	.+214    	; 0x3f46e <main+0xb48>
   3f398:	08 34       	cpi	r16, 0x48	; 72
   3f39a:	09 f0       	breq	.+2      	; 0x3f39e <main+0xa78>
   3f39c:	c8 c0       	rjmp	.+400    	; 0x3f52e <main+0xc08>
   3f39e:	77 c0       	rjmp	.+238    	; 0x3f48e <main+0xb68>
   3f3a0:	0b 34       	cpi	r16, 0x4B	; 75
   3f3a2:	09 f4       	brne	.+2      	; 0x3f3a6 <main+0xa80>
   3f3a4:	9c c0       	rjmp	.+312    	; 0x3f4de <main+0xbb8>
   3f3a6:	0c 34       	cpi	r16, 0x4C	; 76
   3f3a8:	09 f0       	breq	.+2      	; 0x3f3ac <main+0xa86>
   3f3aa:	c1 c0       	rjmp	.+386    	; 0x3f52e <main+0xc08>
   3f3ac:	ac c0       	rjmp	.+344    	; 0x3f506 <main+0xbe0>
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
   3f3ae:	8f ef       	ldi	r24, 0xFF	; 255
   3f3b0:	81 b9       	out	0x01, r24	; 1
   3f3b2:	07 c0       	rjmp	.+14     	; 0x3f3c2 <main+0xa9c>
				while (!Serial_Available())
				{
					PORTA	^=	0xff;
   3f3b4:	82 b1       	in	r24, 0x02	; 2
   3f3b6:	80 95       	com	r24
   3f3b8:	82 b9       	out	0x02, r24	; 2
					delay_ms(200);
   3f3ba:	88 ec       	ldi	r24, 0xC8	; 200
   3f3bc:	90 e0       	ldi	r25, 0x00	; 0
   3f3be:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f3c2:	80 91 c0 00 	lds	r24, 0x00C0
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
				while (!Serial_Available())
   3f3c6:	87 ff       	sbrs	r24, 7
   3f3c8:	f5 cf       	rjmp	.-22     	; 0x3f3b4 <main+0xa8e>
				{
					PORTA	^=	0xff;
					delay_ms(200);
				}
				PORTA	=	0;
   3f3ca:	12 b8       	out	0x02, r1	; 2
   3f3cc:	b3 c0       	rjmp	.+358    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
   3f3ce:	8f ef       	ldi	r24, 0xFF	; 255
   3f3d0:	84 b9       	out	0x04, r24	; 4
   3f3d2:	07 c0       	rjmp	.+14     	; 0x3f3e2 <main+0xabc>
				while (!Serial_Available())
				{
					PORTB	^=	0xff;
   3f3d4:	85 b1       	in	r24, 0x05	; 5
   3f3d6:	80 95       	com	r24
   3f3d8:	85 b9       	out	0x05, r24	; 5
					delay_ms(200);
   3f3da:	88 ec       	ldi	r24, 0xC8	; 200
   3f3dc:	90 e0       	ldi	r25, 0x00	; 0
   3f3de:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f3e2:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
				while (!Serial_Available())
   3f3e6:	87 ff       	sbrs	r24, 7
   3f3e8:	f5 cf       	rjmp	.-22     	; 0x3f3d4 <main+0xaae>
				{
					PORTB	^=	0xff;
					delay_ms(200);
				}
				PORTB	=	0;
   3f3ea:	15 b8       	out	0x05, r1	; 5
   3f3ec:	a3 c0       	rjmp	.+326    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
   3f3ee:	8f ef       	ldi	r24, 0xFF	; 255
   3f3f0:	87 b9       	out	0x07, r24	; 7
   3f3f2:	07 c0       	rjmp	.+14     	; 0x3f402 <main+0xadc>
				while (!Serial_Available())
				{
					PORTC	^=	0xff;
   3f3f4:	88 b1       	in	r24, 0x08	; 8
   3f3f6:	80 95       	com	r24
   3f3f8:	88 b9       	out	0x08, r24	; 8
					delay_ms(200);
   3f3fa:	88 ec       	ldi	r24, 0xC8	; 200
   3f3fc:	90 e0       	ldi	r25, 0x00	; 0
   3f3fe:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f402:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
				while (!Serial_Available())
   3f406:	87 ff       	sbrs	r24, 7
   3f408:	f5 cf       	rjmp	.-22     	; 0x3f3f4 <main+0xace>
				{
					PORTC	^=	0xff;
					delay_ms(200);
				}
				PORTC	=	0;
   3f40a:	18 b8       	out	0x08, r1	; 8
   3f40c:	93 c0       	rjmp	.+294    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
   3f40e:	8f ef       	ldi	r24, 0xFF	; 255
   3f410:	8a b9       	out	0x0a, r24	; 10
   3f412:	07 c0       	rjmp	.+14     	; 0x3f422 <main+0xafc>
				while (!Serial_Available())
				{
					PORTD	^=	0xff;
   3f414:	8b b1       	in	r24, 0x0b	; 11
   3f416:	80 95       	com	r24
   3f418:	8b b9       	out	0x0b, r24	; 11
					delay_ms(200);
   3f41a:	88 ec       	ldi	r24, 0xC8	; 200
   3f41c:	90 e0       	ldi	r25, 0x00	; 0
   3f41e:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f422:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
				while (!Serial_Available())
   3f426:	87 ff       	sbrs	r24, 7
   3f428:	f5 cf       	rjmp	.-22     	; 0x3f414 <main+0xaee>
				{
					PORTD	^=	0xff;
					delay_ms(200);
				}
				PORTD	=	0;
   3f42a:	1b b8       	out	0x0b, r1	; 11
   3f42c:	83 c0       	rjmp	.+262    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
   3f42e:	8f ef       	ldi	r24, 0xFF	; 255
   3f430:	8d b9       	out	0x0d, r24	; 13
   3f432:	07 c0       	rjmp	.+14     	; 0x3f442 <main+0xb1c>
				while (!Serial_Available())
				{
					PORTE	^=	0xff;
   3f434:	8e b1       	in	r24, 0x0e	; 14
   3f436:	80 95       	com	r24
   3f438:	8e b9       	out	0x0e, r24	; 14
					delay_ms(200);
   3f43a:	88 ec       	ldi	r24, 0xC8	; 200
   3f43c:	90 e0       	ldi	r25, 0x00	; 0
   3f43e:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f442:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRE
			case 'E':
				DDRE	=	0xff;
				while (!Serial_Available())
   3f446:	87 ff       	sbrs	r24, 7
   3f448:	f5 cf       	rjmp	.-22     	; 0x3f434 <main+0xb0e>
				{
					PORTE	^=	0xff;
					delay_ms(200);
				}
				PORTE	=	0;
   3f44a:	1e b8       	out	0x0e, r1	; 14
   3f44c:	73 c0       	rjmp	.+230    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
   3f44e:	8f ef       	ldi	r24, 0xFF	; 255
   3f450:	80 bb       	out	0x10, r24	; 16
   3f452:	07 c0       	rjmp	.+14     	; 0x3f462 <main+0xb3c>
				while (!Serial_Available())
				{
					PORTF	^=	0xff;
   3f454:	81 b3       	in	r24, 0x11	; 17
   3f456:	80 95       	com	r24
   3f458:	81 bb       	out	0x11, r24	; 17
					delay_ms(200);
   3f45a:	88 ec       	ldi	r24, 0xC8	; 200
   3f45c:	90 e0       	ldi	r25, 0x00	; 0
   3f45e:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f462:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRF
			case 'F':
				DDRF	=	0xff;
				while (!Serial_Available())
   3f466:	87 ff       	sbrs	r24, 7
   3f468:	f5 cf       	rjmp	.-22     	; 0x3f454 <main+0xb2e>
				{
					PORTF	^=	0xff;
					delay_ms(200);
				}
				PORTF	=	0;
   3f46a:	11 ba       	out	0x11, r1	; 17
   3f46c:	63 c0       	rjmp	.+198    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
   3f46e:	8f ef       	ldi	r24, 0xFF	; 255
   3f470:	83 bb       	out	0x13, r24	; 19
   3f472:	07 c0       	rjmp	.+14     	; 0x3f482 <main+0xb5c>
				while (!Serial_Available())
				{
					PORTG	^=	0xff;
   3f474:	84 b3       	in	r24, 0x14	; 20
   3f476:	80 95       	com	r24
   3f478:	84 bb       	out	0x14, r24	; 20
					delay_ms(200);
   3f47a:	88 ec       	ldi	r24, 0xC8	; 200
   3f47c:	90 e0       	ldi	r25, 0x00	; 0
   3f47e:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f482:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRG
			case 'G':
				DDRG	=	0xff;
				while (!Serial_Available())
   3f486:	87 ff       	sbrs	r24, 7
   3f488:	f5 cf       	rjmp	.-22     	; 0x3f474 <main+0xb4e>
				{
					PORTG	^=	0xff;
					delay_ms(200);
				}
				PORTG	=	0;
   3f48a:	14 ba       	out	0x14, r1	; 20
   3f48c:	53 c0       	rjmp	.+166    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
   3f48e:	8f ef       	ldi	r24, 0xFF	; 255
   3f490:	80 93 01 01 	sts	0x0101, r24
   3f494:	09 c0       	rjmp	.+18     	; 0x3f4a8 <main+0xb82>
				while (!Serial_Available())
				{
					PORTH	^=	0xff;
   3f496:	80 91 02 01 	lds	r24, 0x0102
   3f49a:	80 95       	com	r24
   3f49c:	80 93 02 01 	sts	0x0102, r24
					delay_ms(200);
   3f4a0:	88 ec       	ldi	r24, 0xC8	; 200
   3f4a2:	90 e0       	ldi	r25, 0x00	; 0
   3f4a4:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f4a8:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRH
			case 'H':
				DDRH	=	0xff;
				while (!Serial_Available())
   3f4ac:	87 ff       	sbrs	r24, 7
   3f4ae:	f3 cf       	rjmp	.-26     	; 0x3f496 <main+0xb70>
				{
					PORTH	^=	0xff;
					delay_ms(200);
				}
				PORTH	=	0;
   3f4b0:	10 92 02 01 	sts	0x0102, r1
   3f4b4:	3f c0       	rjmp	.+126    	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
   3f4b6:	8f ef       	ldi	r24, 0xFF	; 255
   3f4b8:	80 93 04 01 	sts	0x0104, r24
   3f4bc:	09 c0       	rjmp	.+18     	; 0x3f4d0 <main+0xbaa>
				while (!Serial_Available())
				{
					PORTJ	^=	0xff;
   3f4be:	80 91 05 01 	lds	r24, 0x0105
   3f4c2:	80 95       	com	r24
   3f4c4:	80 93 05 01 	sts	0x0105, r24
					delay_ms(200);
   3f4c8:	88 ec       	ldi	r24, 0xC8	; 200
   3f4ca:	90 e0       	ldi	r25, 0x00	; 0
   3f4cc:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f4d0:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRJ
			case 'J':
				DDRJ	=	0xff;
				while (!Serial_Available())
   3f4d4:	87 ff       	sbrs	r24, 7
   3f4d6:	f3 cf       	rjmp	.-26     	; 0x3f4be <main+0xb98>
				{
					PORTJ	^=	0xff;
					delay_ms(200);
				}
				PORTJ	=	0;
   3f4d8:	10 92 05 01 	sts	0x0105, r1
   3f4dc:	2b c0       	rjmp	.+86     	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
   3f4de:	8f ef       	ldi	r24, 0xFF	; 255
   3f4e0:	80 93 07 01 	sts	0x0107, r24
   3f4e4:	09 c0       	rjmp	.+18     	; 0x3f4f8 <main+0xbd2>
				while (!Serial_Available())
				{
					PORTK	^=	0xff;
   3f4e6:	80 91 08 01 	lds	r24, 0x0108
   3f4ea:	80 95       	com	r24
   3f4ec:	80 93 08 01 	sts	0x0108, r24
					delay_ms(200);
   3f4f0:	88 ec       	ldi	r24, 0xC8	; 200
   3f4f2:	90 e0       	ldi	r25, 0x00	; 0
   3f4f4:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f4f8:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRK
			case 'K':
				DDRK	=	0xff;
				while (!Serial_Available())
   3f4fc:	87 ff       	sbrs	r24, 7
   3f4fe:	f3 cf       	rjmp	.-26     	; 0x3f4e6 <main+0xbc0>
				{
					PORTK	^=	0xff;
					delay_ms(200);
				}
				PORTK	=	0;
   3f500:	10 92 08 01 	sts	0x0108, r1
   3f504:	17 c0       	rjmp	.+46     	; 0x3f534 <main+0xc0e>
				break;
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
   3f506:	8f ef       	ldi	r24, 0xFF	; 255
   3f508:	80 93 0a 01 	sts	0x010A, r24
   3f50c:	09 c0       	rjmp	.+18     	; 0x3f520 <main+0xbfa>
				while (!Serial_Available())
				{
					PORTL	^=	0xff;
   3f50e:	80 91 0b 01 	lds	r24, 0x010B
   3f512:	80 95       	com	r24
   3f514:	80 93 0b 01 	sts	0x010B, r24
					delay_ms(200);
   3f518:	88 ec       	ldi	r24, 0xC8	; 200
   3f51a:	90 e0       	ldi	r25, 0x00	; 0
   3f51c:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3f520:	80 91 c0 00 	lds	r24, 0x00C0
		#endif

		#ifdef DDRL
			case 'L':
				DDRL	=	0xff;
				while (!Serial_Available())
   3f524:	87 ff       	sbrs	r24, 7
   3f526:	f3 cf       	rjmp	.-26     	; 0x3f50e <main+0xbe8>
				{
					PORTL	^=	0xff;
					delay_ms(200);
				}
				PORTL	=	0;
   3f528:	10 92 0b 01 	sts	0x010B, r1
   3f52c:	03 c0       	rjmp	.+6      	; 0x3f534 <main+0xc0e>
				break;
		#endif

			default:
				PrintFromPROGMEMln(gTextMsg_PortNotSupported, 0);
   3f52e:	8f e2       	ldi	r24, 0x2F	; 47
   3f530:	92 ee       	ldi	r25, 0xE2	; 226
   3f532:	08 c0       	rjmp	.+16     	; 0x3f544 <main+0xc1e>
				getCharFlag	=	false;
				break;
		}
		if (getCharFlag)
		{
			recchar();
   3f534:	0f 94 2b f3 	call	0x3e656	; 0x3e656 <recchar>
   3f538:	09 cb       	rjmp	.-2542   	; 0x3eb4c <main+0x226>
		}
	}
	else
	{
		PrintFromPROGMEMln(gTextMsg_MustBeLetter, 0);
   3f53a:	82 e4       	ldi	r24, 0x42	; 66
   3f53c:	92 ee       	ldi	r25, 0xE2	; 226
   3f53e:	02 c0       	rjmp	.+4      	; 0x3f544 <main+0xc1e>
				//*	do nothing
				break;
	 	#endif
	 	
			default:
				PrintFromPROGMEMln(gTextMsg_HUH, 0);
   3f540:	8c e1       	ldi	r24, 0x1C	; 28
   3f542:	91 ee       	ldi	r25, 0xE1	; 225
   3f544:	60 e0       	ldi	r22, 0x00	; 0
   3f546:	0f 94 7d f3 	call	0x3e6fa	; 0x3e6fa <PrintFromPROGMEMln>
   3f54a:	00 cb       	rjmp	.-2560   	; 0x3eb4c <main+0x226>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f54c:	cc 24       	eor	r12, r12
   3f54e:	dd 24       	eor	r13, r13
				}
			#endif

				switch (msgParseState)
   3f550:	53 30       	cpi	r21, 0x03	; 3
   3f552:	01 f1       	breq	.+64     	; 0x3f594 <main+0xc6e>
   3f554:	54 30       	cpi	r21, 0x04	; 4
   3f556:	28 f4       	brcc	.+10     	; 0x3f562 <main+0xc3c>
   3f558:	51 30       	cpi	r21, 0x01	; 1
   3f55a:	71 f0       	breq	.+28     	; 0x3f578 <main+0xc52>
   3f55c:	52 30       	cpi	r21, 0x02	; 2
   3f55e:	a8 f4       	brcc	.+42     	; 0x3f58a <main+0xc64>
   3f560:	07 c0       	rjmp	.+14     	; 0x3f570 <main+0xc4a>
   3f562:	55 30       	cpi	r21, 0x05	; 5
   3f564:	31 f1       	breq	.+76     	; 0x3f5b2 <main+0xc8c>
   3f566:	55 30       	cpi	r21, 0x05	; 5
   3f568:	e0 f0       	brcs	.+56     	; 0x3f5a2 <main+0xc7c>
   3f56a:	56 30       	cpi	r21, 0x06	; 6
   3f56c:	a9 f5       	brne	.+106    	; 0x3f5d8 <main+0xcb2>
   3f56e:	30 c0       	rjmp	.+96     	; 0x3f5d0 <main+0xcaa>
				{
					case ST_START:
						if ( c == MESSAGE_START )
   3f570:	ab 31       	cpi	r26, 0x1B	; 27
   3f572:	09 f0       	breq	.+2      	; 0x3f576 <main+0xc50>
   3f574:	77 ca       	rjmp	.-2834   	; 0x3ea64 <main+0x13e>
   3f576:	5e c2       	rjmp	.+1212   	; 0x3fa34 <main+0x110e>
							checksum		=	MESSAGE_START^0;
						}
						break;

					case ST_GET_SEQ_NUM:
						if ( (c == 1) || (c == seqNum) )
   3f578:	a1 30       	cpi	r26, 0x01	; 1
   3f57a:	19 f0       	breq	.+6      	; 0x3f582 <main+0xc5c>
   3f57c:	a4 17       	cp	r26, r20
   3f57e:	09 f0       	breq	.+2      	; 0x3f582 <main+0xc5c>
   3f580:	5e c2       	rjmp	.+1212   	; 0x3fa3e <main+0x1118>
						{
							seqNum			=	c;
							msgParseState	=	ST_MSG_SIZE_1;
							checksum		^=	c;
   3f582:	2a 26       	eor	r2, r26
   3f584:	4a 2f       	mov	r20, r26

					case ST_GET_SEQ_NUM:
						if ( (c == 1) || (c == seqNum) )
						{
							seqNum			=	c;
							msgParseState	=	ST_MSG_SIZE_1;
   3f586:	52 e0       	ldi	r21, 0x02	; 2
							checksum		^=	c;
   3f588:	6d ca       	rjmp	.-2854   	; 0x3ea64 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   3f58a:	7a 2f       	mov	r23, r26
   3f58c:	60 e0       	ldi	r22, 0x00	; 0
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   3f58e:	2a 26       	eor	r2, r26
						}
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
						msgParseState	=	ST_MSG_SIZE_2;
   3f590:	53 e0       	ldi	r21, 0x03	; 3
						checksum		^=	c;
						break;
   3f592:	68 ca       	rjmp	.-2864   	; 0x3ea64 <main+0x13e>

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   3f594:	8a 2f       	mov	r24, r26
   3f596:	90 e0       	ldi	r25, 0x00	; 0
   3f598:	68 2b       	or	r22, r24
   3f59a:	79 2b       	or	r23, r25
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   3f59c:	2a 26       	eor	r2, r26
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
						msgParseState	=	ST_GET_TOKEN;
   3f59e:	54 e0       	ldi	r21, 0x04	; 4
						checksum		^=	c;
						break;
   3f5a0:	61 ca       	rjmp	.-2878   	; 0x3ea64 <main+0x13e>

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   3f5a2:	ae 30       	cpi	r26, 0x0E	; 14
   3f5a4:	09 f0       	breq	.+2      	; 0x3f5a8 <main+0xc82>
   3f5a6:	4b c2       	rjmp	.+1174   	; 0x3fa3e <main+0x1118>
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   3f5a8:	2a 26       	eor	r2, r26
							ii				=	0;
   3f5aa:	20 e0       	ldi	r18, 0x00	; 0
   3f5ac:	30 e0       	ldi	r19, 0x00	; 0
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
						{
							msgParseState	=	ST_GET_DATA;
   3f5ae:	55 e0       	ldi	r21, 0x05	; 5
   3f5b0:	59 ca       	rjmp	.-2894   	; 0x3ea64 <main+0x13e>
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   3f5b2:	e1 e0       	ldi	r30, 0x01	; 1
   3f5b4:	f0 e0       	ldi	r31, 0x00	; 0
   3f5b6:	ec 0f       	add	r30, r28
   3f5b8:	fd 1f       	adc	r31, r29
   3f5ba:	e2 0f       	add	r30, r18
   3f5bc:	f3 1f       	adc	r31, r19
   3f5be:	a0 83       	st	Z, r26
   3f5c0:	2f 5f       	subi	r18, 0xFF	; 255
   3f5c2:	3f 4f       	sbci	r19, 0xFF	; 255
						checksum		^=	c;
   3f5c4:	2a 26       	eor	r2, r26
						if (ii == msgLength )
   3f5c6:	26 17       	cp	r18, r22
   3f5c8:	37 07       	cpc	r19, r23
   3f5ca:	09 f0       	breq	.+2      	; 0x3f5ce <main+0xca8>
   3f5cc:	4b ca       	rjmp	.-2922   	; 0x3ea64 <main+0x13e>
   3f5ce:	3a c2       	rjmp	.+1140   	; 0x3fa44 <main+0x111e>
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f5d0:	a2 15       	cp	r26, r2
   3f5d2:	09 f0       	breq	.+2      	; 0x3f5d6 <main+0xcb0>
   3f5d4:	34 c2       	rjmp	.+1128   	; 0x3fa3e <main+0x1118>
   3f5d6:	03 c0       	rjmp	.+6      	; 0x3f5de <main+0xcb8>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3f5d8:	57 30       	cpi	r21, 0x07	; 7
   3f5da:	09 f0       	breq	.+2      	; 0x3f5de <main+0xcb8>
   3f5dc:	43 ca       	rjmp	.-2938   	; 0x3ea64 <main+0x13e>
   3f5de:	ce 5d       	subi	r28, 0xDE	; 222
   3f5e0:	de 4f       	sbci	r29, 0xFE	; 254
   3f5e2:	39 83       	std	Y+1, r19	; 0x01
   3f5e4:	28 83       	st	Y, r18
   3f5e6:	c2 52       	subi	r28, 0x22	; 34
   3f5e8:	d1 40       	sbci	r29, 0x01	; 1
   3f5ea:	34 2e       	mov	r3, r20
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f5ec:	bb 24       	eor	r11, r11

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3f5ee:	39 81       	ldd	r19, Y+1	; 0x01
   3f5f0:	33 31       	cpi	r19, 0x13	; 19
   3f5f2:	09 f4       	brne	.+2      	; 0x3f5f6 <main+0xcd0>
   3f5f4:	f2 c0       	rjmp	.+484    	; 0x3f7da <main+0xeb4>
   3f5f6:	34 31       	cpi	r19, 0x14	; 20
   3f5f8:	c8 f4       	brcc	.+50     	; 0x3f62c <main+0xd06>
   3f5fa:	36 30       	cpi	r19, 0x06	; 6
   3f5fc:	09 f4       	brne	.+2      	; 0x3f600 <main+0xcda>
   3f5fe:	c1 c0       	rjmp	.+386    	; 0x3f782 <main+0xe5c>
   3f600:	37 30       	cpi	r19, 0x07	; 7
   3f602:	50 f4       	brcc	.+20     	; 0x3f618 <main+0xcf2>
   3f604:	32 30       	cpi	r19, 0x02	; 2
   3f606:	09 f4       	brne	.+2      	; 0x3f60a <main+0xce4>
   3f608:	6a c1       	rjmp	.+724    	; 0x3f8de <main+0xfb8>
   3f60a:	33 30       	cpi	r19, 0x03	; 3
   3f60c:	09 f4       	brne	.+2      	; 0x3f610 <main+0xcea>
   3f60e:	57 c0       	rjmp	.+174    	; 0x3f6be <main+0xd98>
   3f610:	31 30       	cpi	r19, 0x01	; 1
   3f612:	09 f0       	breq	.+2      	; 0x3f616 <main+0xcf0>
   3f614:	ba c1       	rjmp	.+884    	; 0x3f98a <main+0x1064>
   3f616:	3d c0       	rjmp	.+122    	; 0x3f692 <main+0xd6c>
   3f618:	31 31       	cpi	r19, 0x11	; 17
   3f61a:	09 f4       	brne	.+2      	; 0x3f61e <main+0xcf8>
   3f61c:	5d c0       	rjmp	.+186    	; 0x3f6d8 <main+0xdb2>
   3f61e:	32 31       	cpi	r19, 0x12	; 18
   3f620:	08 f0       	brcs	.+2      	; 0x3f624 <main+0xcfe>
   3f622:	a3 c0       	rjmp	.+326    	; 0x3f76a <main+0xe44>
   3f624:	30 31       	cpi	r19, 0x10	; 16
   3f626:	09 f0       	breq	.+2      	; 0x3f62a <main+0xd04>
   3f628:	b0 c1       	rjmp	.+864    	; 0x3f98a <main+0x1064>
   3f62a:	59 c1       	rjmp	.+690    	; 0x3f8de <main+0xfb8>
   3f62c:	38 31       	cpi	r19, 0x18	; 24
   3f62e:	09 f4       	brne	.+2      	; 0x3f632 <main+0xd0c>
   3f630:	6f c0       	rjmp	.+222    	; 0x3f710 <main+0xdea>
   3f632:	39 31       	cpi	r19, 0x19	; 25
   3f634:	50 f4       	brcc	.+20     	; 0x3f64a <main+0xd24>
   3f636:	35 31       	cpi	r19, 0x15	; 21
   3f638:	09 f4       	brne	.+2      	; 0x3f63c <main+0xd16>
   3f63a:	cf c0       	rjmp	.+414    	; 0x3f7da <main+0xeb4>
   3f63c:	35 31       	cpi	r19, 0x15	; 21
   3f63e:	08 f4       	brcc	.+2      	; 0x3f642 <main+0xd1c>
   3f640:	50 c1       	rjmp	.+672    	; 0x3f8e2 <main+0xfbc>
   3f642:	36 31       	cpi	r19, 0x16	; 22
   3f644:	09 f0       	breq	.+2      	; 0x3f648 <main+0xd22>
   3f646:	a1 c1       	rjmp	.+834    	; 0x3f98a <main+0x1064>
   3f648:	4c c1       	rjmp	.+664    	; 0x3f8e2 <main+0xfbc>
   3f64a:	3a 31       	cpi	r19, 0x1A	; 26
   3f64c:	09 f4       	brne	.+2      	; 0x3f650 <main+0xd2a>
   3f64e:	54 c0       	rjmp	.+168    	; 0x3f6f8 <main+0xdd2>
   3f650:	3a 31       	cpi	r19, 0x1A	; 26
   3f652:	08 f4       	brcc	.+2      	; 0x3f656 <main+0xd30>
   3f654:	79 c0       	rjmp	.+242    	; 0x3f748 <main+0xe22>
   3f656:	3b 31       	cpi	r19, 0x1B	; 27
   3f658:	09 f4       	brne	.+2      	; 0x3f65c <main+0xd36>
   3f65a:	41 c0       	rjmp	.+130    	; 0x3f6de <main+0xdb8>
   3f65c:	3d 31       	cpi	r19, 0x1D	; 29
   3f65e:	09 f0       	breq	.+2      	; 0x3f662 <main+0xd3c>
   3f660:	94 c1       	rjmp	.+808    	; 0x3f98a <main+0x1064>
				case CMD_SPI_MULTI:
					{
						unsigned char answerByte;
						unsigned char flag=0;

						if ( msgBuffer[4]== 0x30 )
   3f662:	9d 81       	ldd	r25, Y+5	; 0x05
   3f664:	90 33       	cpi	r25, 0x30	; 48
   3f666:	39 f4       	brne	.+14     	; 0x3f676 <main+0xd50>
						{
							unsigned char signatureIndex	=	msgBuffer[6];
   3f668:	8f 81       	ldd	r24, Y+7	; 0x07

							if ( signatureIndex == 0 )
   3f66a:	88 23       	and	r24, r24
   3f66c:	31 f0       	breq	.+12     	; 0x3f67a <main+0xd54>
								answerByte	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
							else if ( signatureIndex == 1 )
   3f66e:	81 30       	cpi	r24, 0x01	; 1
   3f670:	31 f4       	brne	.+12     	; 0x3f67e <main+0xd58>
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f672:	88 e9       	ldi	r24, 0x98	; 152
   3f674:	05 c0       	rjmp	.+10     	; 0x3f680 <main+0xd5a>
							else
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						}
						else if ( msgBuffer[4] & 0x50 )
						{
							answerByte	=	0; //read fuse/lock bits not implemented, return dummy value
   3f676:	80 e0       	ldi	r24, 0x00	; 0
   3f678:	03 c0       	rjmp	.+6      	; 0x3f680 <main+0xd5a>
						if ( msgBuffer[4]== 0x30 )
						{
							unsigned char signatureIndex	=	msgBuffer[6];

							if ( signatureIndex == 0 )
								answerByte	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3f67a:	8e e1       	ldi	r24, 0x1E	; 30
   3f67c:	01 c0       	rjmp	.+2      	; 0x3f680 <main+0xd5a>
							else if ( signatureIndex == 1 )
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
							else
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
   3f67e:	81 e0       	ldi	r24, 0x01	; 1
	//						flag	=	1; // Remark this line for AVRDUDE <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   3f680:	1a 82       	std	Y+2, r1	; 0x02
							msgBuffer[2]	=	0;
   3f682:	1b 82       	std	Y+3, r1	; 0x03
							msgBuffer[3]	=	msgBuffer[4];
   3f684:	9c 83       	std	Y+4, r25	; 0x04
							msgBuffer[4]	=	0;
   3f686:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[5]	=	answerByte;
   3f688:	8e 83       	std	Y+6, r24	; 0x06
							msgBuffer[6]	=	STATUS_CMD_OK;
   3f68a:	1f 82       	std	Y+7, r1	; 0x07
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
	//						flag	=	1; // Remark this line for AVRDUDE <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
   3f68c:	07 e0       	ldi	r16, 0x07	; 7
   3f68e:	10 e0       	ldi	r17, 0x00	; 0
   3f690:	80 c1       	rjmp	.+768    	; 0x3f992 <main+0x106c>
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3f692:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] 	=	8;
   3f694:	88 e0       	ldi	r24, 0x08	; 8
   3f696:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[3] 	=	'A';
   3f698:	81 e4       	ldi	r24, 0x41	; 65
   3f69a:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4] 	=	'V';
   3f69c:	86 e5       	ldi	r24, 0x56	; 86
   3f69e:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[5] 	=	'R';
   3f6a0:	82 e5       	ldi	r24, 0x52	; 82
   3f6a2:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] 	=	'I';
   3f6a4:	89 e4       	ldi	r24, 0x49	; 73
   3f6a6:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[7] 	=	'S';
   3f6a8:	83 e5       	ldi	r24, 0x53	; 83
   3f6aa:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[8] 	=	'P';
   3f6ac:	80 e5       	ldi	r24, 0x50	; 80
   3f6ae:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[9] 	=	'_';
   3f6b0:	8f e5       	ldi	r24, 0x5F	; 95
   3f6b2:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[10]	=	'2';
   3f6b4:	82 e3       	ldi	r24, 0x32	; 50
   3f6b6:	8b 87       	std	Y+11, r24	; 0x0b
						}
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
   3f6b8:	0b e0       	ldi	r16, 0x0B	; 11
   3f6ba:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[6] 	=	'I';
					msgBuffer[7] 	=	'S';
					msgBuffer[8] 	=	'P';
					msgBuffer[9] 	=	'_';
					msgBuffer[10]	=	'2';
					break;
   3f6bc:	6a c1       	rjmp	.+724    	; 0x3f992 <main+0x106c>

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   3f6be:	ea 81       	ldd	r30, Y+2	; 0x02
   3f6c0:	e0 58       	subi	r30, 0x80	; 128
   3f6c2:	e3 31       	cpi	r30, 0x13	; 19
   3f6c4:	28 f4       	brcc	.+10     	; 0x3f6d0 <main+0xdaa>
   3f6c6:	f0 e0       	ldi	r31, 0x00	; 0
   3f6c8:	e0 50       	subi	r30, 0x00	; 0
   3f6ca:	fe 4f       	sbci	r31, 0xFE	; 254
   3f6cc:	80 81       	ld	r24, Z
   3f6ce:	01 c0       	rjmp	.+2      	; 0x3f6d2 <main+0xdac>
   3f6d0:	80 e0       	ldi	r24, 0x00	; 0
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f6d2:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	value;
   3f6d4:	8b 83       	std	Y+3, r24	; 0x03
   3f6d6:	46 c0       	rjmp	.+140    	; 0x3f764 <main+0xe3e>
					}
					break;

				case CMD_LEAVE_PROGMODE_ISP:
					isLeave	=	1;
   3f6d8:	bb 24       	eor	r11, r11
   3f6da:	b3 94       	inc	r11
   3f6dc:	00 c1       	rjmp	.+512    	; 0x3f8de <main+0xfb8>
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   3f6de:	8d 81       	ldd	r24, Y+5	; 0x05
						unsigned char signature;

						if ( signatureIndex == 0 )
   3f6e0:	88 23       	and	r24, r24
   3f6e2:	21 f0       	breq	.+8      	; 0x3f6ec <main+0xdc6>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   3f6e4:	81 30       	cpi	r24, 0x01	; 1
   3f6e6:	21 f4       	brne	.+8      	; 0x3f6f0 <main+0xdca>
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f6e8:	88 e9       	ldi	r24, 0x98	; 152
   3f6ea:	03 c0       	rjmp	.+6      	; 0x3f6f2 <main+0xdcc>
					{
						unsigned char signatureIndex	=	msgBuffer[4];
						unsigned char signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3f6ec:	8e e1       	ldi	r24, 0x1E	; 30
   3f6ee:	01 c0       	rjmp	.+2      	; 0x3f6f2 <main+0xdcc>
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f6f0:	81 e0       	ldi	r24, 0x01	; 1

						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f6f2:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	signature;
   3f6f4:	8b 83       	std	Y+3, r24	; 0x03
   3f6f6:	08 c0       	rjmp	.+16     	; 0x3f708 <main+0xde2>
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f6f8:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3f6fa:	e1 e0       	ldi	r30, 0x01	; 1
   3f6fc:	f0 e0       	ldi	r31, 0x00	; 0
   3f6fe:	89 e0       	ldi	r24, 0x09	; 9
   3f700:	80 93 57 00 	sts	0x0057, r24
   3f704:	e4 91       	lpm	r30, Z+
   3f706:	eb 83       	std	Y+3, r30	; 0x03
					msgBuffer[3]	=	STATUS_CMD_OK;
   3f708:	1c 82       	std	Y+4, r1	; 0x04
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
   3f70a:	04 e0       	ldi	r16, 0x04	; 4
   3f70c:	10 e0       	ldi	r17, 0x00	; 0
					msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
					msgBuffer[3]	=	STATUS_CMD_OK;
					break;
   3f70e:	41 c1       	rjmp	.+642    	; 0x3f992 <main+0x106c>

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   3f710:	8b 81       	ldd	r24, Y+3	; 0x03
   3f712:	80 35       	cpi	r24, 0x50	; 80
   3f714:	89 f4       	brne	.+34     	; 0x3f738 <main+0xe12>
						{
							if ( msgBuffer[3] == 0x08 )
   3f716:	8c 81       	ldd	r24, Y+4	; 0x04
   3f718:	88 30       	cpi	r24, 0x08	; 8
   3f71a:	39 f4       	brne	.+14     	; 0x3f72a <main+0xe04>
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3f71c:	e2 e0       	ldi	r30, 0x02	; 2
   3f71e:	f0 e0       	ldi	r31, 0x00	; 0
   3f720:	89 e0       	ldi	r24, 0x09	; 9
   3f722:	80 93 57 00 	sts	0x0057, r24
   3f726:	e4 91       	lpm	r30, Z+
   3f728:	0d c0       	rjmp	.+26     	; 0x3f744 <main+0xe1e>
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3f72a:	e0 e0       	ldi	r30, 0x00	; 0
   3f72c:	f0 e0       	ldi	r31, 0x00	; 0
   3f72e:	89 e0       	ldi	r24, 0x09	; 9
   3f730:	80 93 57 00 	sts	0x0057, r24
   3f734:	e4 91       	lpm	r30, Z+
   3f736:	06 c0       	rjmp	.+12     	; 0x3f744 <main+0xe1e>
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3f738:	e3 e0       	ldi	r30, 0x03	; 3
   3f73a:	f0 e0       	ldi	r31, 0x00	; 0
   3f73c:	89 e0       	ldi	r24, 0x09	; 9
   3f73e:	80 93 57 00 	sts	0x0057, r24
   3f742:	e4 91       	lpm	r30, Z+
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f744:	1a 82       	std	Y+2, r1	; 0x02
   3f746:	df cf       	rjmp	.-66     	; 0x3f706 <main+0xde0>
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3f748:	8d 81       	ldd	r24, Y+5	; 0x05
						boot_lock_bits_set(lockBits);		// and program it
   3f74a:	83 6c       	ori	r24, 0xC3	; 195
   3f74c:	99 e0       	ldi	r25, 0x09	; 9
   3f74e:	e1 e0       	ldi	r30, 0x01	; 1
   3f750:	f0 e0       	ldi	r31, 0x00	; 0
   3f752:	08 2e       	mov	r0, r24
   3f754:	90 93 57 00 	sts	0x0057, r25
   3f758:	e8 95       	spm
						boot_spm_busy_wait();
   3f75a:	07 b6       	in	r0, 0x37	; 55
   3f75c:	00 fc       	sbrc	r0, 0
   3f75e:	fd cf       	rjmp	.-6      	; 0x3f75a <main+0xe34>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f760:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
   3f762:	1b 82       	std	Y+3, r1	; 0x03

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
						boot_lock_bits_set(lockBits);		// and program it
						boot_spm_busy_wait();

						msgLength		=	3;
   3f764:	03 e0       	ldi	r16, 0x03	; 3
   3f766:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
   3f768:	14 c1       	rjmp	.+552    	; 0x3f992 <main+0x106c>
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f76a:	1a 82       	std	Y+2, r1	; 0x02
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
   3f76c:	02 e0       	ldi	r16, 0x02	; 2
   3f76e:	10 e0       	ldi	r17, 0x00	; 0
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
   3f770:	c2 5e       	subi	r28, 0xE2	; 226
   3f772:	de 4f       	sbci	r29, 0xFE	; 254
   3f774:	18 82       	st	Y, r1
   3f776:	19 82       	std	Y+1, r1	; 0x01
   3f778:	1a 82       	std	Y+2, r1	; 0x02
   3f77a:	1b 82       	std	Y+3, r1	; 0x03
   3f77c:	ce 51       	subi	r28, 0x1E	; 30
   3f77e:	d1 40       	sbci	r29, 0x01	; 1
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;
   3f780:	08 c1       	rjmp	.+528    	; 0x3f992 <main+0x106c>

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3f782:	6a 80       	ldd	r6, Y+2	; 0x02
   3f784:	77 24       	eor	r7, r7
   3f786:	88 24       	eor	r8, r8
   3f788:	99 24       	eor	r9, r9
   3f78a:	96 2c       	mov	r9, r6
   3f78c:	88 24       	eor	r8, r8
   3f78e:	77 24       	eor	r7, r7
   3f790:	66 24       	eor	r6, r6
   3f792:	8b 81       	ldd	r24, Y+3	; 0x03
   3f794:	90 e0       	ldi	r25, 0x00	; 0
   3f796:	a0 e0       	ldi	r26, 0x00	; 0
   3f798:	b0 e0       	ldi	r27, 0x00	; 0
   3f79a:	dc 01       	movw	r26, r24
   3f79c:	99 27       	eor	r25, r25
   3f79e:	88 27       	eor	r24, r24
   3f7a0:	68 2a       	or	r6, r24
   3f7a2:	79 2a       	or	r7, r25
   3f7a4:	8a 2a       	or	r8, r26
   3f7a6:	9b 2a       	or	r9, r27
   3f7a8:	8d 81       	ldd	r24, Y+5	; 0x05
   3f7aa:	90 e0       	ldi	r25, 0x00	; 0
   3f7ac:	a0 e0       	ldi	r26, 0x00	; 0
   3f7ae:	b0 e0       	ldi	r27, 0x00	; 0
   3f7b0:	68 2a       	or	r6, r24
   3f7b2:	79 2a       	or	r7, r25
   3f7b4:	8a 2a       	or	r8, r26
   3f7b6:	9b 2a       	or	r9, r27
   3f7b8:	8c 81       	ldd	r24, Y+4	; 0x04
   3f7ba:	90 e0       	ldi	r25, 0x00	; 0
   3f7bc:	a0 e0       	ldi	r26, 0x00	; 0
   3f7be:	b0 e0       	ldi	r27, 0x00	; 0
   3f7c0:	ba 2f       	mov	r27, r26
   3f7c2:	a9 2f       	mov	r26, r25
   3f7c4:	98 2f       	mov	r25, r24
   3f7c6:	88 27       	eor	r24, r24
   3f7c8:	68 2a       	or	r6, r24
   3f7ca:	79 2a       	or	r7, r25
   3f7cc:	8a 2a       	or	r8, r26
   3f7ce:	9b 2a       	or	r9, r27
   3f7d0:	66 0c       	add	r6, r6
   3f7d2:	77 1c       	adc	r7, r7
   3f7d4:	88 1c       	adc	r8, r8
   3f7d6:	99 1c       	adc	r9, r9
   3f7d8:	82 c0       	rjmp	.+260    	; 0x3f8de <main+0xfb8>
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f7da:	8a 81       	ldd	r24, Y+2	; 0x02
   3f7dc:	2b 81       	ldd	r18, Y+3	; 0x03
						unsigned int	data;
						unsigned char	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3f7de:	33 31       	cpi	r19, 0x13	; 19
   3f7e0:	09 f0       	breq	.+2      	; 0x3f7e4 <main+0xebe>
   3f7e2:	7d c0       	rjmp	.+250    	; 0x3f8de <main+0xfb8>
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   3f7e4:	c2 5e       	subi	r28, 0xE2	; 226
   3f7e6:	de 4f       	sbci	r29, 0xFE	; 254
   3f7e8:	48 81       	ld	r20, Y
   3f7ea:	59 81       	ldd	r21, Y+1	; 0x01
   3f7ec:	6a 81       	ldd	r22, Y+2	; 0x02
   3f7ee:	7b 81       	ldd	r23, Y+3	; 0x03
   3f7f0:	ce 51       	subi	r28, 0x1E	; 30
   3f7f2:	d1 40       	sbci	r29, 0x01	; 1
   3f7f4:	40 30       	cpi	r20, 0x00	; 0
   3f7f6:	90 ec       	ldi	r25, 0xC0	; 192
   3f7f8:	59 07       	cpc	r21, r25
   3f7fa:	93 e0       	ldi	r25, 0x03	; 3
   3f7fc:	69 07       	cpc	r22, r25
   3f7fe:	90 e0       	ldi	r25, 0x00	; 0
   3f800:	79 07       	cpc	r23, r25
   3f802:	f0 f4       	brcc	.+60     	; 0x3f840 <main+0xf1a>
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   3f804:	93 e0       	ldi	r25, 0x03	; 3
   3f806:	fa 01       	movw	r30, r20
   3f808:	60 93 5b 00 	sts	0x005B, r22
   3f80c:	90 93 57 00 	sts	0x0057, r25
   3f810:	e8 95       	spm
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3f812:	07 b6       	in	r0, 0x37	; 55
   3f814:	00 fc       	sbrc	r0, 0
   3f816:	fd cf       	rjmp	.-6      	; 0x3f812 <main+0xeec>
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3f818:	c2 5e       	subi	r28, 0xE2	; 226
   3f81a:	de 4f       	sbci	r29, 0xFE	; 254
   3f81c:	48 81       	ld	r20, Y
   3f81e:	59 81       	ldd	r21, Y+1	; 0x01
   3f820:	6a 81       	ldd	r22, Y+2	; 0x02
   3f822:	7b 81       	ldd	r23, Y+3	; 0x03
   3f824:	ce 51       	subi	r28, 0x1E	; 30
   3f826:	d1 40       	sbci	r29, 0x01	; 1
   3f828:	40 50       	subi	r20, 0x00	; 0
   3f82a:	5f 4f       	sbci	r21, 0xFF	; 255
   3f82c:	6f 4f       	sbci	r22, 0xFF	; 255
   3f82e:	7f 4f       	sbci	r23, 0xFF	; 255
   3f830:	c2 5e       	subi	r28, 0xE2	; 226
   3f832:	de 4f       	sbci	r29, 0xFE	; 254
   3f834:	48 83       	st	Y, r20
   3f836:	59 83       	std	Y+1, r21	; 0x01
   3f838:	6a 83       	std	Y+2, r22	; 0x02
   3f83a:	7b 83       	std	Y+3, r23	; 0x03
   3f83c:	ce 51       	subi	r28, 0x1E	; 30
   3f83e:	d1 40       	sbci	r29, 0x01	; 1
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f840:	cf 5c       	subi	r28, 0xCF	; 207
   3f842:	de 4f       	sbci	r29, 0xFE	; 254
   3f844:	88 83       	st	Y, r24
   3f846:	c1 53       	subi	r28, 0x31	; 49
   3f848:	d1 40       	sbci	r29, 0x01	; 1
   3f84a:	c0 5d       	subi	r28, 0xD0	; 208
   3f84c:	de 4f       	sbci	r29, 0xFE	; 254
   3f84e:	18 82       	st	Y, r1
   3f850:	c0 53       	subi	r28, 0x30	; 48
   3f852:	d1 40       	sbci	r29, 0x01	; 1
   3f854:	30 e0       	ldi	r19, 0x00	; 0
   3f856:	c0 5d       	subi	r28, 0xD0	; 208
   3f858:	de 4f       	sbci	r29, 0xFE	; 254
   3f85a:	68 81       	ld	r22, Y
   3f85c:	79 81       	ldd	r23, Y+1	; 0x01
   3f85e:	c0 53       	subi	r28, 0x30	; 48
   3f860:	d1 40       	sbci	r29, 0x01	; 1
   3f862:	26 2b       	or	r18, r22
   3f864:	37 2b       	or	r19, r23
   3f866:	d4 01       	movw	r26, r8
   3f868:	c3 01       	movw	r24, r6
						unsigned char	*p	=	msgBuffer+10;
   3f86a:	be 01       	movw	r22, r28
   3f86c:	65 5f       	subi	r22, 0xF5	; 245
   3f86e:	7f 4f       	sbci	r23, 0xFF	; 255
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   3f870:	01 e0       	ldi	r16, 0x01	; 1
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
   3f872:	fb 01       	movw	r30, r22
   3f874:	40 81       	ld	r20, Z
								highByte 	=	*p++;
   3f876:	51 81       	ldd	r21, Z+1	; 0x01
}



//*****************************************************************************
int main(void)
   3f878:	6e 5f       	subi	r22, 0xFE	; 254
   3f87a:	7f 4f       	sbci	r23, 0xFF	; 255
							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
   3f87c:	cd 5c       	subi	r28, 0xCD	; 205
   3f87e:	de 4f       	sbci	r29, 0xFE	; 254
   3f880:	58 83       	st	Y, r21
   3f882:	c3 53       	subi	r28, 0x33	; 51
   3f884:	d1 40       	sbci	r29, 0x01	; 1
   3f886:	ce 5c       	subi	r28, 0xCE	; 206
   3f888:	de 4f       	sbci	r29, 0xFE	; 254
   3f88a:	18 82       	st	Y, r1
   3f88c:	c2 53       	subi	r28, 0x32	; 50
   3f88e:	d1 40       	sbci	r29, 0x01	; 1
   3f890:	50 e0       	ldi	r21, 0x00	; 0
   3f892:	ce 5c       	subi	r28, 0xCE	; 206
   3f894:	de 4f       	sbci	r29, 0xFE	; 254
   3f896:	e8 81       	ld	r30, Y
   3f898:	f9 81       	ldd	r31, Y+1	; 0x01
   3f89a:	c2 53       	subi	r28, 0x32	; 50
   3f89c:	d1 40       	sbci	r29, 0x01	; 1
   3f89e:	4e 2b       	or	r20, r30
   3f8a0:	5f 2b       	or	r21, r31
								boot_page_fill(address,data);
   3f8a2:	0a 01       	movw	r0, r20
   3f8a4:	fc 01       	movw	r30, r24
   3f8a6:	a0 93 5b 00 	sts	0x005B, r26
   3f8aa:	00 93 57 00 	sts	0x0057, r16
   3f8ae:	e8 95       	spm
   3f8b0:	11 24       	eor	r1, r1

								address	=	address + 2;	// Select next word in memory
   3f8b2:	02 96       	adiw	r24, 0x02	; 2
   3f8b4:	a1 1d       	adc	r26, r1
   3f8b6:	b1 1d       	adc	r27, r1
								size	-=	2;				// Reduce number of bytes to write by two
   3f8b8:	22 50       	subi	r18, 0x02	; 2
   3f8ba:	30 40       	sbci	r19, 0x00	; 0
							} while (size);					// Loop until all bytes written
   3f8bc:	d1 f6       	brne	.-76     	; 0x3f872 <main+0xf4c>

							boot_page_write(tempaddress);
   3f8be:	25 e0       	ldi	r18, 0x05	; 5
   3f8c0:	f3 01       	movw	r30, r6
   3f8c2:	80 92 5b 00 	sts	0x005B, r8
   3f8c6:	20 93 57 00 	sts	0x0057, r18
   3f8ca:	e8 95       	spm
							boot_spm_busy_wait();
   3f8cc:	07 b6       	in	r0, 0x37	; 55
   3f8ce:	00 fc       	sbrc	r0, 0
   3f8d0:	fd cf       	rjmp	.-6      	; 0x3f8cc <main+0xfa6>
							boot_rww_enable();				// Re-enable the RWW section
   3f8d2:	21 e1       	ldi	r18, 0x11	; 17
   3f8d4:	20 93 57 00 	sts	0x0057, r18
   3f8d8:	e8 95       	spm
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);

								address	=	address + 2;	// Select next word in memory
   3f8da:	3c 01       	movw	r6, r24
   3f8dc:	4d 01       	movw	r8, r26
								size--;						// Decrease number of bytes to write
							} while (size);					// Loop until all bytes written
						#endif
						}
							msgLength	=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f8de:	1a 82       	std	Y+2, r1	; 0x02
   3f8e0:	56 c0       	rjmp	.+172    	; 0x3f98e <main+0x1068>
					break;

				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f8e2:	fa 81       	ldd	r31, Y+2	; 0x02
   3f8e4:	cb 5c       	subi	r28, 0xCB	; 203
   3f8e6:	de 4f       	sbci	r29, 0xFE	; 254
   3f8e8:	f8 83       	st	Y, r31
   3f8ea:	c5 53       	subi	r28, 0x35	; 53
   3f8ec:	d1 40       	sbci	r29, 0x01	; 1
   3f8ee:	cc 5c       	subi	r28, 0xCC	; 204
   3f8f0:	de 4f       	sbci	r29, 0xFE	; 254
   3f8f2:	18 82       	st	Y, r1
   3f8f4:	c4 53       	subi	r28, 0x34	; 52
   3f8f6:	d1 40       	sbci	r29, 0x01	; 1
   3f8f8:	8b 81       	ldd	r24, Y+3	; 0x03
   3f8fa:	90 e0       	ldi	r25, 0x00	; 0
   3f8fc:	cc 5c       	subi	r28, 0xCC	; 204
   3f8fe:	de 4f       	sbci	r29, 0xFE	; 254
   3f900:	48 81       	ld	r20, Y
   3f902:	59 81       	ldd	r21, Y+1	; 0x01
   3f904:	c4 53       	subi	r28, 0x34	; 52
   3f906:	d1 40       	sbci	r29, 0x01	; 1
   3f908:	84 2b       	or	r24, r20
   3f90a:	95 2b       	or	r25, r21
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   3f90c:	8c 01       	movw	r16, r24
   3f90e:	0d 5f       	subi	r16, 0xFD	; 253
   3f910:	1f 4f       	sbci	r17, 0xFF	; 255

						*p++	=	STATUS_CMD_OK;
   3f912:	1a 82       	std	Y+2, r1	; 0x02
   3f914:	de 01       	movw	r26, r28
   3f916:	13 96       	adiw	r26, 0x03	; 3
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f918:	34 31       	cpi	r19, 0x14	; 20
   3f91a:	a1 f4       	brne	.+40     	; 0x3f944 <main+0x101e>
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   3f91c:	a4 01       	movw	r20, r8
   3f91e:	93 01       	movw	r18, r6
							unsigned int data;

							// Read FLASH
							do {
	#if defined(RAMPZ)
								data	=	pgm_read_word_far(address);
   3f920:	4b bf       	out	0x3b, r20	; 59
   3f922:	f9 01       	movw	r30, r18
   3f924:	67 91       	elpm	r22, Z+
   3f926:	76 91       	elpm	r23, Z+
	#else
								data	=	pgm_read_word_near(address);
	#endif
								*p++	=	(unsigned char)data;		//LSB
   3f928:	6c 93       	st	X, r22
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3f92a:	11 96       	adiw	r26, 0x01	; 1
   3f92c:	7c 93       	st	X, r23
   3f92e:	11 97       	sbiw	r26, 0x01	; 1
}



//*****************************************************************************
int main(void)
   3f930:	12 96       	adiw	r26, 0x02	; 2
	#else
								data	=	pgm_read_word_near(address);
	#endif
								*p++	=	(unsigned char)data;		//LSB
								*p++	=	(unsigned char)(data >> 8);	//MSB
								address	+=	2;							// Select next word in memory
   3f932:	2e 5f       	subi	r18, 0xFE	; 254
   3f934:	3f 4f       	sbci	r19, 0xFF	; 255
   3f936:	4f 4f       	sbci	r20, 0xFF	; 255
   3f938:	5f 4f       	sbci	r21, 0xFF	; 255
								size	-=	2;
   3f93a:	02 97       	sbiw	r24, 0x02	; 2
							}while (size);
   3f93c:	89 f7       	brne	.-30     	; 0x3f920 <main+0xffa>
   3f93e:	39 01       	movw	r6, r18
   3f940:	4a 01       	movw	r8, r20
   3f942:	21 c0       	rjmp	.+66     	; 0x3f986 <main+0x1060>
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   3f944:	fd 01       	movw	r30, r26
}



//*****************************************************************************
int main(void)
   3f946:	01 97       	sbiw	r24, 0x01	; 1
   3f948:	9c 01       	movw	r18, r24
   3f94a:	40 e0       	ldi	r20, 0x00	; 0
   3f94c:	50 e0       	ldi	r21, 0x00	; 0
   3f94e:	2f 5f       	subi	r18, 0xFF	; 255
   3f950:	3f 4f       	sbci	r19, 0xFF	; 255
   3f952:	4f 4f       	sbci	r20, 0xFF	; 255
   3f954:	5f 4f       	sbci	r21, 0xFF	; 255
   3f956:	26 0d       	add	r18, r6
   3f958:	37 1d       	adc	r19, r7
   3f95a:	48 1d       	adc	r20, r8
   3f95c:	59 1d       	adc	r21, r9
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   3f95e:	61 bc       	out	0x21, r6	; 33
								EEARH	=	((address >> 8));
   3f960:	bb 27       	eor	r27, r27
   3f962:	a9 2d       	mov	r26, r9
   3f964:	98 2d       	mov	r25, r8
   3f966:	87 2d       	mov	r24, r7
   3f968:	82 bd       	out	0x22, r24	; 34
								address++;					// Select next EEPROM byte
   3f96a:	08 94       	sec
   3f96c:	61 1c       	adc	r6, r1
   3f96e:	71 1c       	adc	r7, r1
   3f970:	81 1c       	adc	r8, r1
   3f972:	91 1c       	adc	r9, r1
								EECR	|=	(1<<EERE);			// Read EEPROM
   3f974:	f8 9a       	sbi	0x1f, 0	; 31
								*p++	=	EEDR;				// Send EEPROM data
   3f976:	80 b5       	in	r24, 0x20	; 32
   3f978:	81 93       	st	Z+, r24
   3f97a:	df 01       	movw	r26, r30
								size--;
							} while (size);
   3f97c:	62 16       	cp	r6, r18
   3f97e:	73 06       	cpc	r7, r19
   3f980:	84 06       	cpc	r8, r20
   3f982:	95 06       	cpc	r9, r21
   3f984:	61 f7       	brne	.-40     	; 0x3f95e <main+0x1038>
						}
						*p++	=	STATUS_CMD_OK;
   3f986:	1c 92       	st	X, r1
					}
					break;
   3f988:	04 c0       	rjmp	.+8      	; 0x3f992 <main+0x106c>

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3f98a:	80 ec       	ldi	r24, 0xC0	; 192
   3f98c:	8a 83       	std	Y+2, r24	; 0x02
						*p++	=	STATUS_CMD_OK;
					}
					break;

				default:
					msgLength		=	2;
   3f98e:	02 e0       	ldi	r16, 0x02	; 2
   3f990:	10 e0       	ldi	r17, 0x00	; 0
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3f992:	8b e1       	ldi	r24, 0x1B	; 27
   3f994:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
   3f998:	83 2d       	mov	r24, r3
   3f99a:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
   3f99e:	81 2f       	mov	r24, r17
   3f9a0:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			sendchar(c);
   3f9a4:	80 2f       	mov	r24, r16
   3f9a6:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
   3f9aa:	8e e0       	ldi	r24, 0x0E	; 14
   3f9ac:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   3f9b0:	25 e1       	ldi	r18, 0x15	; 21
   3f9b2:	22 2e       	mov	r2, r18
   3f9b4:	23 24       	eor	r2, r3

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   3f9b6:	20 26       	eor	r2, r16

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3f9b8:	21 26       	eor	r2, r17

			p	=	msgBuffer;
   3f9ba:	7e 01       	movw	r14, r28
   3f9bc:	08 94       	sec
   3f9be:	e1 1c       	adc	r14, r1
   3f9c0:	f1 1c       	adc	r15, r1
			while ( msgLength )
   3f9c2:	09 c0       	rjmp	.+18     	; 0x3f9d6 <main+0x10b0>
			{
				c	=	*p++;
   3f9c4:	d7 01       	movw	r26, r14
   3f9c6:	ad 90       	ld	r10, X+
   3f9c8:	7d 01       	movw	r14, r26
				sendchar(c);
   3f9ca:	8a 2d       	mov	r24, r10
   3f9cc:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
				checksum ^=c;
   3f9d0:	2a 24       	eor	r2, r10
				msgLength--;
   3f9d2:	01 50       	subi	r16, 0x01	; 1
   3f9d4:	10 40       	sbci	r17, 0x00	; 0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   3f9d6:	01 15       	cp	r16, r1
   3f9d8:	11 05       	cpc	r17, r1
   3f9da:	a1 f7       	brne	.-24     	; 0x3f9c4 <main+0x109e>
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
   3f9dc:	82 2d       	mov	r24, r2
   3f9de:	0f 94 1f f3 	call	0x3e63e	; 0x3e63e <sendchar>
			seqNum++;
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3f9e2:	85 b1       	in	r24, 0x05	; 5
   3f9e4:	80 58       	subi	r24, 0x80	; 128
   3f9e6:	85 b9       	out	0x05, r24	; 5


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3f9e8:	bb 20       	and	r11, r11
   3f9ea:	81 f4       	brne	.+32     	; 0x3fa0c <main+0x10e6>
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
			seqNum++;
   3f9ec:	33 94       	inc	r3
   3f9ee:	80 e0       	ldi	r24, 0x00	; 0
   3f9f0:	90 e0       	ldi	r25, 0x00	; 0
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3f9f2:	60 e0       	ldi	r22, 0x00	; 0
   3f9f4:	70 e0       	ldi	r23, 0x00	; 0
   3f9f6:	a0 e0       	ldi	r26, 0x00	; 0
   3f9f8:	ce 5d       	subi	r28, 0xDE	; 222
   3f9fa:	de 4f       	sbci	r29, 0xFE	; 254
   3f9fc:	28 81       	ld	r18, Y
   3f9fe:	39 81       	ldd	r19, Y+1	; 0x01
   3fa00:	c2 52       	subi	r28, 0x22	; 34
   3fa02:	d1 40       	sbci	r29, 0x01	; 1
   3fa04:	5a 2f       	mov	r21, r26
   3fa06:	43 2d       	mov	r20, r3
   3fa08:	0d 94 34 f5 	jmp	0x3ea68	; 0x3ea68 <main+0x142>
	delay_ms(100);
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~(1<<PROGLED_PIN);	// set to default
   3fa0c:	27 98       	cbi	0x04, 7	; 4
	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED OFF
   3fa0e:	2f 98       	cbi	0x05, 7	; 5
//	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED OFf
	delay_ms(100);							// delay after exit
   3fa10:	84 e6       	ldi	r24, 0x64	; 100
   3fa12:	90 e0       	ldi	r25, 0x00	; 0
   3fa14:	0f 94 32 f3 	call	0x3e664	; 0x3e664 <delay_ms>
#endif


	asm volatile ("nop");			// wait until port has changed
   3fa18:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3fa1a:	80 91 c0 00 	lds	r24, 0x00C0
   3fa1e:	8d 7f       	andi	r24, 0xFD	; 253
   3fa20:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
   3fa24:	81 e1       	ldi	r24, 0x11	; 17
   3fa26:	80 93 57 00 	sts	0x0057, r24
   3fa2a:	e8 95       	spm


	asm volatile(
   3fa2c:	ee 27       	eor	r30, r30
   3fa2e:	ff 27       	eor	r31, r31
   3fa30:	09 94       	ijmp
   3fa32:	ff cf       	rjmp	.-2      	; 0x3fa32 <main+0x110c>
				{
					case ST_START:
						if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
							checksum		=	MESSAGE_START^0;
   3fa34:	9b e1       	ldi	r25, 0x1B	; 27
   3fa36:	29 2e       	mov	r2, r25
				switch (msgParseState)
				{
					case ST_START:
						if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
   3fa38:	51 e0       	ldi	r21, 0x01	; 1
   3fa3a:	0d 94 32 f5 	jmp	0x3ea64	; 0x3ea64 <main+0x13e>
							checksum		^=	c;
							ii				=	0;
						}
						else
						{
							msgParseState	=	ST_START;
   3fa3e:	50 e0       	ldi	r21, 0x00	; 0
   3fa40:	0d 94 32 f5 	jmp	0x3ea64	; 0x3ea64 <main+0x13e>
					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
						checksum		^=	c;
						if (ii == msgLength )
						{
							msgParseState	=	ST_GET_CHECK;
   3fa44:	56 e0       	ldi	r21, 0x06	; 6
   3fa46:	0d 94 32 f5 	jmp	0x3ea64	; 0x3ea64 <main+0x13e>

0003fa4a <analogRead>:

	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
//	ADMUX	=	(analog_reference << 6) | (pin & 0x07);
	ADMUX	=	(1 << 6) | (pin & 0x07);
   3fa4a:	98 2f       	mov	r25, r24
   3fa4c:	97 70       	andi	r25, 0x07	; 7
   3fa4e:	90 64       	ori	r25, 0x40	; 64
   3fa50:	90 93 7c 00 	sts	0x007C, r25

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB	=	(ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
   3fa54:	20 91 7b 00 	lds	r18, 0x007B
   3fa58:	86 95       	lsr	r24
   3fa5a:	86 95       	lsr	r24
   3fa5c:	86 95       	lsr	r24
   3fa5e:	90 e0       	ldi	r25, 0x00	; 0
   3fa60:	81 70       	andi	r24, 0x01	; 1
   3fa62:	90 70       	andi	r25, 0x00	; 0
   3fa64:	33 e0       	ldi	r19, 0x03	; 3
   3fa66:	88 0f       	add	r24, r24
   3fa68:	99 1f       	adc	r25, r25
   3fa6a:	3a 95       	dec	r19
   3fa6c:	e1 f7       	brne	.-8      	; 0x3fa66 <analogRead+0x1c>
   3fa6e:	27 7f       	andi	r18, 0xF7	; 247
   3fa70:	28 2b       	or	r18, r24
   3fa72:	20 93 7b 00 	sts	0x007B, r18

	// without a delay, we seem to read from the wrong channel
	//delay(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
   3fa76:	80 91 7a 00 	lds	r24, 0x007A
   3fa7a:	80 64       	ori	r24, 0x40	; 64
   3fa7c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
   3fa80:	80 91 7a 00 	lds	r24, 0x007A
   3fa84:	86 fd       	sbrc	r24, 6
   3fa86:	fc cf       	rjmp	.-8      	; 0x3fa80 <analogRead+0x36>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low		=	ADCL;
   3fa88:	20 91 78 00 	lds	r18, 0x0078
	high	=	ADCH;
   3fa8c:	30 91 79 00 	lds	r19, 0x0079

	// combine the two bytes
	return (high << 8) | low;
   3fa90:	93 2f       	mov	r25, r19
   3fa92:	80 e0       	ldi	r24, 0x00	; 0
   3fa94:	30 e0       	ldi	r19, 0x00	; 0
   3fa96:	28 2b       	or	r18, r24
   3fa98:	39 2b       	or	r19, r25
}
   3fa9a:	c9 01       	movw	r24, r18
   3fa9c:	08 95       	ret

0003fa9e <initPortsIO>:
#include <avr\io.h>
#include "ports_io.h"

void initPortsIO(void) {

	DDRA = 0xFF;	// proximity pulses as output
   3fa9e:	8f ef       	ldi	r24, 0xFF	; 255
   3faa0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;	// proximity pulses turned off
   3faa2:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;	// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
   3faa4:	97 ef       	ldi	r25, 0xF7	; 247
   3faa6:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;
   3faa8:	20 ee       	ldi	r18, 0xE0	; 224
   3faaa:	25 b9       	out	0x05, r18	; 5
	//PORTB |= (1 << 5) | (1 << 6) | (1 << 7); // leds off	
	//PORTB &= ~(1 << 5) & ~(1 << 6) & ~(1 << 7); // leds off
	//PORTB &= ~(1 << 7);

	DDRC = 0xF0;	// selector as input; IR leds as output; sens-enable, sleep as output
   3faac:	20 ef       	ldi	r18, 0xF0	; 240
   3faae:	27 b9       	out	0x07, r18	; 7
	PORTC = 0xB0;	// sleep = 1, IR leds = 1
   3fab0:	20 eb       	ldi	r18, 0xB0	; 176
   3fab2:	28 b9       	out	0x08, r18	; 8

	DDRD = 0xFC;	// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
   3fab4:	2c ef       	ldi	r18, 0xFC	; 252
   3fab6:	2a b9       	out	0x0a, r18	; 10
	PORTD = 0x03;	// default for unused pins is 0
   3fab8:	23 e0       	ldi	r18, 0x03	; 3
   3faba:	2b b9       	out	0x0b, r18	; 11

	DDRE = 0xFF;	// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
   3fabc:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
   3fabe:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;	// adc channel pins as input		
   3fac0:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;	// unused pins as output
   3fac2:	83 bb       	out	0x13, r24	; 19
	#endif
	#ifdef HW_REV_3_0_1
		PORTG = 0x00;	// default for unused pins is 0
	#endif
	#ifdef HW_REV_3_1
		PORTG = 0x08;	// default for unused pins is 0, led3 to 1
   3fac4:	28 e0       	ldi	r18, 0x08	; 8
   3fac6:	24 bb       	out	0x14, r18	; 20
	#endif	

	DDRH = 0xFF;	// all pins to output; when usart is activated it changes the pins direction accordingly
   3fac8:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;	// default for unused pins is 0; pwm for motors set to 0 when stopped
   3facc:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;	// cliff pulses as output; charge-on, button0, remote, charge status as input
   3fad0:	2f e0       	ldi	r18, 0x0F	; 15
   3fad2:	20 93 04 01 	sts	0x0104, r18
	#ifdef HW_REV_3_0_1
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	#endif
	#ifdef HW_REV_3_1
		PORTJ = 0x0F;
   3fad6:	20 93 05 01 	sts	0x0105, r18
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	#endif	

	DDRK = 0x00;	// adc channel pins as input
   3fada:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;	// all pins to output
   3fade:	80 93 0a 01 	sts	0x010A, r24
	#endif
	#ifdef HW_REV_3_0_1	
		PORTL = 0x00;	// pwm (unused) and unused pins to 0
	#endif
	#ifdef HW_REV_3_1
		PORTL = 0xF7;	// pwm (unused) to 0, leds to 1
   3fae2:	90 93 0b 01 	sts	0x010B, r25
	#endif
		
}
   3fae6:	08 95       	ret

0003fae8 <__divmodhi4>:
   3fae8:	97 fb       	bst	r25, 7
   3faea:	09 2e       	mov	r0, r25
   3faec:	07 26       	eor	r0, r23
   3faee:	0a d0       	rcall	.+20     	; 0x3fb04 <__divmodhi4_neg1>
   3faf0:	77 fd       	sbrc	r23, 7
   3faf2:	04 d0       	rcall	.+8      	; 0x3fafc <__divmodhi4_neg2>
   3faf4:	2e d0       	rcall	.+92     	; 0x3fb52 <__udivmodhi4>
   3faf6:	06 d0       	rcall	.+12     	; 0x3fb04 <__divmodhi4_neg1>
   3faf8:	00 20       	and	r0, r0
   3fafa:	1a f4       	brpl	.+6      	; 0x3fb02 <__divmodhi4_exit>

0003fafc <__divmodhi4_neg2>:
   3fafc:	70 95       	com	r23
   3fafe:	61 95       	neg	r22
   3fb00:	7f 4f       	sbci	r23, 0xFF	; 255

0003fb02 <__divmodhi4_exit>:
   3fb02:	08 95       	ret

0003fb04 <__divmodhi4_neg1>:
   3fb04:	f6 f7       	brtc	.-4      	; 0x3fb02 <__divmodhi4_exit>
   3fb06:	90 95       	com	r25
   3fb08:	81 95       	neg	r24
   3fb0a:	9f 4f       	sbci	r25, 0xFF	; 255
   3fb0c:	08 95       	ret

0003fb0e <__udivmodsi4>:
   3fb0e:	a1 e2       	ldi	r26, 0x21	; 33
   3fb10:	1a 2e       	mov	r1, r26
   3fb12:	aa 1b       	sub	r26, r26
   3fb14:	bb 1b       	sub	r27, r27
   3fb16:	fd 01       	movw	r30, r26
   3fb18:	0d c0       	rjmp	.+26     	; 0x3fb34 <__udivmodsi4_ep>

0003fb1a <__udivmodsi4_loop>:
   3fb1a:	aa 1f       	adc	r26, r26
   3fb1c:	bb 1f       	adc	r27, r27
   3fb1e:	ee 1f       	adc	r30, r30
   3fb20:	ff 1f       	adc	r31, r31
   3fb22:	a2 17       	cp	r26, r18
   3fb24:	b3 07       	cpc	r27, r19
   3fb26:	e4 07       	cpc	r30, r20
   3fb28:	f5 07       	cpc	r31, r21
   3fb2a:	20 f0       	brcs	.+8      	; 0x3fb34 <__udivmodsi4_ep>
   3fb2c:	a2 1b       	sub	r26, r18
   3fb2e:	b3 0b       	sbc	r27, r19
   3fb30:	e4 0b       	sbc	r30, r20
   3fb32:	f5 0b       	sbc	r31, r21

0003fb34 <__udivmodsi4_ep>:
   3fb34:	66 1f       	adc	r22, r22
   3fb36:	77 1f       	adc	r23, r23
   3fb38:	88 1f       	adc	r24, r24
   3fb3a:	99 1f       	adc	r25, r25
   3fb3c:	1a 94       	dec	r1
   3fb3e:	69 f7       	brne	.-38     	; 0x3fb1a <__udivmodsi4_loop>
   3fb40:	60 95       	com	r22
   3fb42:	70 95       	com	r23
   3fb44:	80 95       	com	r24
   3fb46:	90 95       	com	r25
   3fb48:	9b 01       	movw	r18, r22
   3fb4a:	ac 01       	movw	r20, r24
   3fb4c:	bd 01       	movw	r22, r26
   3fb4e:	cf 01       	movw	r24, r30
   3fb50:	08 95       	ret

0003fb52 <__udivmodhi4>:
   3fb52:	aa 1b       	sub	r26, r26
   3fb54:	bb 1b       	sub	r27, r27
   3fb56:	51 e1       	ldi	r21, 0x11	; 17
   3fb58:	07 c0       	rjmp	.+14     	; 0x3fb68 <__udivmodhi4_ep>

0003fb5a <__udivmodhi4_loop>:
   3fb5a:	aa 1f       	adc	r26, r26
   3fb5c:	bb 1f       	adc	r27, r27
   3fb5e:	a6 17       	cp	r26, r22
   3fb60:	b7 07       	cpc	r27, r23
   3fb62:	10 f0       	brcs	.+4      	; 0x3fb68 <__udivmodhi4_ep>
   3fb64:	a6 1b       	sub	r26, r22
   3fb66:	b7 0b       	sbc	r27, r23

0003fb68 <__udivmodhi4_ep>:
   3fb68:	88 1f       	adc	r24, r24
   3fb6a:	99 1f       	adc	r25, r25
   3fb6c:	5a 95       	dec	r21
   3fb6e:	a9 f7       	brne	.-22     	; 0x3fb5a <__udivmodhi4_loop>
   3fb70:	80 95       	com	r24
   3fb72:	90 95       	com	r25
   3fb74:	bc 01       	movw	r22, r24
   3fb76:	cd 01       	movw	r24, r26
   3fb78:	08 95       	ret

0003fb7a <__eerd_byte_m2560>:
   3fb7a:	f9 99       	sbic	0x1f, 1	; 31
   3fb7c:	fe cf       	rjmp	.-4      	; 0x3fb7a <__eerd_byte_m2560>
   3fb7e:	92 bd       	out	0x22, r25	; 34
   3fb80:	81 bd       	out	0x21, r24	; 33
   3fb82:	f8 9a       	sbi	0x1f, 0	; 31
   3fb84:	99 27       	eor	r25, r25
   3fb86:	80 b5       	in	r24, 0x20	; 32
   3fb88:	08 95       	ret

0003fb8a <__eewr_byte_m2560>:
   3fb8a:	26 2f       	mov	r18, r22

0003fb8c <__eewr_r18_m2560>:
   3fb8c:	f9 99       	sbic	0x1f, 1	; 31
   3fb8e:	fe cf       	rjmp	.-4      	; 0x3fb8c <__eewr_r18_m2560>
   3fb90:	1f ba       	out	0x1f, r1	; 31
   3fb92:	92 bd       	out	0x22, r25	; 34
   3fb94:	81 bd       	out	0x21, r24	; 33
   3fb96:	20 bd       	out	0x20, r18	; 32
   3fb98:	0f b6       	in	r0, 0x3f	; 63
   3fb9a:	f8 94       	cli
   3fb9c:	fa 9a       	sbi	0x1f, 2	; 31
   3fb9e:	f9 9a       	sbi	0x1f, 1	; 31
   3fba0:	0f be       	out	0x3f, r0	; 63
   3fba2:	01 96       	adiw	r24, 0x01	; 1
   3fba4:	08 95       	ret

0003fba6 <_exit>:
   3fba6:	ff cf       	rjmp	.-2      	; 0x3fba6 <_exit>
